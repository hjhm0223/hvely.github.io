{"componentChunkName":"component---src-templates-single-post-js","path":"/posts-hidden/open-robot-makers-yandex-order-mgt/","result":{"data":{"post":{"frontmatter":{"meta":{"title":"test meta title","description":"test meta description","noindex":null,"canonicalLink":null},"title":"Open Robot Makers YandexOrderMgt","template":"SinglePost","subtitle":null,"date":"May 20th, 2022","categories":[{"category":"Project"}]},"html":"<h1>Open Robot Makers YandexOrderMgt</h1>\n<h2>0. 시스템 연동 정보</h2>\n<table>\n<thead>\n<tr>\n<th>시스템</th>\n<th>인스턴스</th>\n<th>세부 정보</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Postgres</td>\n<td>추후 기재</td>\n<td>추후 기재(table)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<br>\n<h2>1. 개발환경</h2>\n<table>\n<thead>\n<tr>\n<th>항목</th>\n<th>버전</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Java</td>\n<td>openjdk-17.0.2</td>\n</tr>\n<tr>\n<td>gradle</td>\n<td>7.4.1</td>\n</tr>\n<tr>\n<td>springboot</td>\n<td>2.6.7</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3>Dependencies</h3>\n<ul>\n<li>\n<p>Spring Boot Starter</p>\n<ul>\n<li>Spring Data JPA</li>\n<li>DB 접근/영속성을 위한 의존성</li>\n<li>Spring Data REST</li>\n<li>REST Pagebale 적용하여 Pagination 처리하기 위한 의존성</li>\n<li>Spring Validation</li>\n<li>@NotNull @NotEmpty 등 DTO/VO 객체 유효성 검증을 위한 의존성</li>\n<li>Spring AOP</li>\n<li>AOP 적용을 위한 의존성</li>\n<li>Spring Web</li>\n<li>Spring MVC 적용을 위한 의존성</li>\n<li>Spring Webflux</li>\n<li>\n<p>WebClient 사용을 위한 의존성</p>\n<blockquote>\n<p>Webflux를 사용하기 위한 것이 아닌 추후 RestTemplate Deprecate 예정에 따라 WebClient를 선제적으로 사용하기 위함입니다.</p>\n</blockquote>\n</li>\n<li>Spring Security</li>\n<li>OAuth2 + JWT 인증/인가 처리를 위한 의존성</li>\n<li>Spring Devtools</li>\n<li>개발시 Live Reload를 위한 의존성</li>\n<li>Spring Test</li>\n<li>Spring 기반 테스트를 위한 의존성</li>\n<li>Keycloak</li>\n<li>Spring Security에서 Keycloak을 인증 서버로 사용하기 위한 의존성</li>\n</ul>\n</li>\n<li>\n<p>Sping Boot Configuration Processor</p>\n<ul>\n<li>application.yml 변수 설정을 위한 의존성</li>\n</ul>\n</li>\n<li>\n<p>Project Lombok</p>\n<ul>\n<li>Getter, Setter, 생성자등 보일러플레이트를 줄이기 위한 의존성</li>\n</ul>\n</li>\n<li>\n<p>Modelmapper</p>\n<ul>\n<li>DTO - Entity 객체간 변환을 위한 매퍼 라이브러리</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3>로컬 개발 환경 구성</h3>\n<h4>Postgres (with docker-compose)</h4>\n<p>  <code>docker-compose.yml</code> 파일을 활용하여 다음 명령어를 입력합니다.  </p>\n<blockquote>\n<p>docker-compose가 설치되어 있어야 합니다.</p>\n</blockquote>\n<pre><code class=\"language-shell\">docker-compose -f docker-compose.yml up -d\n</code></pre>\n<p>  docker-compose.yml</p>\n<pre><code class=\"language-yaml\">version: '3.1'\nservices:\n  postgres:\n    image: postgres:latest\n    container_name: postRobotTest\n    restart: always\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_USER: admin\n      POSTGRES_PASSWORD: test1234\n      POSTGRES_DB: robot_test\n</code></pre>\n<p>  테스트 테이블 및 데이터 생성</p>\n<pre><code class=\"language-sql\">-- Table: public.robot_status\n\nDROP TABLE IF EXISTS public.widget;\n\nCREATE TABLE IF NOT EXISTS public.widget (\n    id CHARACTER VARYING(50) PRIMARY KEY NOT NULL,\n    name CHARACTER VARYING(30) NOT NULL,\n    item_key CHARACTER VARYING(50),\n    x DOUBLE PRECISION,\n    y DOUBLE PRECISION,\n    width DOUBLE PRECISION,\n    height DOUBLE PRECISION,\n    draggable BOOLEAN,\n    resizable BOOLEAN,\n    selected BOOLEAN,\n    grid_x DOUBLE PRECISION,\n    grid_y DOUBLE PRECISION\n);\n\n-- Table: public.robot_status\n\nDROP TABLE IF EXISTS public.robot_info;\n\nCREATE TABLE IF NOT EXISTS public.robot_info (\n    id CHARACTER VARYING(50) PRIMARY KEY NOT NULL,\n    version CHARACTER VARYING(5),\n    name CHARACTER VARYING(30)\n);\n\n-- Table: public.robot_status\n\nDROP TABLE IF EXISTS public.robot_status;\n\nCREATE TABLE IF NOT EXISTS public.robot_status(\n    rb_id character varying(30) PRIMARY KEY NOT NULL,\n    clct_dt timestamp without time zone,\n    x double precision,\n    y double precision,\n    bttr double precision,\n    drv_stat integer,\n    speed double precision,\n    heading double precision,\n    map_id character varying(32),\n    floor character varying(5),\n    section character varying(5),\n    from_node character varying(32),\n    to_node character varying(32),\n    charge boolean\n);\n\nINSERT INTO public.widget VALUES(gen_random_uuid(), 'RobotInfo', 'TE.ST.RO.BO.T1.11', 220, 120, 360, 160, true, false, false, 20, 20);\nINSERT INTO public.widget VALUES(gen_random_uuid(), 'TestWidget', 'TE.ST.RO.BO.T1.12', 680, 80, 360, 160, true, true, false, 20, 20);\nINSERT INTO public.widget VALUES(gen_random_uuid(), 'TestWidget', 'TE.ST.RO.BO.T1.22', 1340, 100, 360, 160, true, false, false, 20, 20);\n\nINSERT INTO public.robot_info VALUES('TE.ST.RO.BO.T1.11', '1.0.1', 'SR-01');\nINSERT INTO public.robot_info VALUES('TE.ST.RO.BO.T1.12', '1.0.1', '서빙로봇A');\nINSERT INTO public.robot_info VALUES('TE.ST.RO.BO.T1.22', '1.0.1', 'SR-01');\n\nINSERT INTO public.robot_status(rb_id, clct_dt, x, y, bttr, drv_stat, speed, heading, map_id, floor, section, from_node, to_node, charge)\nVALUES ('TE.ST.RO.BO.T1.11', now(), -12.00001, 32.123111, 99, 1, 0.7, 57.295779, '670', '1', 'A', 'T-C8', 'T-C1', false);\nINSERT INTO public.robot_status(rb_id, clct_dt, x, y, bttr, drv_stat, speed, heading, map_id, floor, section, from_node, to_node, charge)\nVALUES ('TE.ST.RO.BO.T1.12', '2021-12-15 20:47:31.523322', 7.741755, -63.037176, 62, 0, 0.7, 57.295779, '670', '1', 'A', 'T-C8', 'T-C1', false);\n</code></pre>\n<h4>프로젝트 설정</h4>\n<ul>\n<li>\n<p>프로파일  </p>\n<ul>\n<li>\n<p>local</p>\n<ul>\n<li>로컬 개발 및 테스트를 위한 profile</li>\n</ul>\n</li>\n<li>\n<p>dev</p>\n<ul>\n<li>개발환경 (dev 브랜치) 적용을 위한 profile</li>\n</ul>\n</li>\n<li>\n<p>prd</p>\n<ul>\n<li>상용환경 (prd 브랜치) 적용을 위한 profile</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>  application.yml</p>\n<pre><code class=\"language-yml\">spring:\nprofiles:\n  active: local\n\n---\nspring:\n  config:\n    activate:\n      on-profile: local\n  datasource:\n    url: jdbc:postgresql://localhost:5432/robot_test\n    username: admin\n    password: test1234\n    driver-class-name: org.postgresql.Driver\n  jpa:\n    show-sql: true\n    hibernate:\n      ddl-auto: none\n  mvc:\n    pathmatch:\n      matching-strategy: ant_path_matcher\n    throw-exception-if-no-handler-found: true\n  web:\n    resources:\n      add-mappings: false\n\nopenrm:\n  baseScheme: \"http\"\n  baseHost: \"localhost\"\n  basePort: 9090\n\nlogging:\n  level:\n    org:\n      keycloak: DEBUG\n      springframework:\n        security: DEBUG\n      hibernate:\n        SQL: DEBUG\n        type:\n          descriptor:\n            sql:\n              BasicBinder: TRACE\nkeycloak:\n  auth-server-url: http://dev.aiindustry.xyz:30480/auth/\n  realm: openrm\n  resource: openapi\n</code></pre>\n<h2>2. 인증</h2>\n<p>  인증 서버로 Keycloak을 사용</p>\n<blockquote>\n<p>기존 Spring Security OAuth2를 이용한 스프링 기반의 인증서버 구축이 Deprecated됨에 따라 공식적으로 Keycloak과 같은 인증 서버를 사용할 것을 권장하고 있다.</p>\n</blockquote>\n<h3>Keycloak 정보(임시)</h3>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>주소</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Keycloak</td>\n<td><a href=\"http://dev.aiindustry.xyz:30480/auth\">http://dev.aiindustry.xyz:30480/auth</a></td>\n</tr>\n<tr>\n<td>OpenID</td>\n<td><a href=\"http://dev.aiindustry.xyz:30480/auth/realms/openrm/.well-known/openid-configuration\">http://dev.aiindustry.xyz:30480/auth/realms/openrm/.well-known/openid-configuration</a></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>항목</th>\n<th>값</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>realm</td>\n<td>openrm</td>\n<td>keycloak의 플랫폼 관리 단위</td>\n</tr>\n<tr>\n<td>client_id</td>\n<td>ormweb</td>\n<td>클라이언트의 아이디</td>\n</tr>\n<tr>\n<td>client_secret</td>\n<td>-</td>\n<td>클라이언트의 비밀번호(postman 샘플 참고)</td>\n</tr>\n<tr>\n<td>grant_type</td>\n<td>password</td>\n<td>인증 방식으로 \"password\" 고정</td>\n</tr>\n<tr>\n<td>username</td>\n<td>admin</td>\n<td>사용자명</td>\n</tr>\n<tr>\n<td>password</td>\n<td>-</td>\n<td>사용자의 비밀번호(postman 샘플 참고)</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>암호 정보는 첨부된 Postman 샘플의 변수 부분 참고</p>\n</blockquote>\n<h3>인증 방식</h3>\n<p>  인증 표준인 OAuth2 프로토콜을 사용</p>\n<p>  OAuth2의 Resource Owner Password Credentials Grant 인증 방식을 사용하며 Bearer 토큰 타입과 JWT 포맷을 사용</p>\n<p>  Role에 기반한 권한 분리</p>\n<h2>3. 호출 흐름</h2>\n<pre><code class=\"language-mermaid\">sequenceDiagram\n  participant A as FE\n  participant B as BE\n  participant D as Keycloak&#x3C;br>(인증 서버)\n  participant C as ORM 플랫폼&#x3C;br>(Open API)\n  A->>B: Request\n  B->D: Auth\n  B->>C: Request\n  C->>B: Response\n  B->>A: Response\n</code></pre>\n<ul>\n<li>플랫폼에 대한 도메인 정보 요청은 같이 개발이 진행되는 Open API를 이용</li>\n<li>BFF에서 사용할 DB는 인스턴스/스키마 분리</li>\n</ul>\n<h2>4. Directory 구조</h2>\n<pre><code>📦src\n┣ 📂main\n┃ ┣ 📂java\n┃ ┃ ┗ 📂com\n┃ ┃ ┃ ┗ 📂kt\n┃ ┃ ┃ ┃ ┗ 📂orm\n┃ ┃ ┃ ┃ ┃ ┣ 📂config\n┃ ┃ ┃ ┃ ┃ ┣ 📂constant\n┃ ┃ ┃ ┃ ┃ ┣ 📂controller\n┃ ┃ ┃ ┃ ┃ ┣ 📂domain\n┃ ┃ ┃ ┃ ┃ ┣ 📂dto\n┃ ┃ ┃ ┃ ┃ ┣ 📂exception\n┃ ┃ ┃ ┃ ┃ ┃ ┗ 📂handler\n┃ ┃ ┃ ┃ ┃ ┣ 📂filter\n┃ ┃ ┃ ┃ ┃ ┣ 📂model\n┃ ┃ ┃ ┃ ┃ ┣ 📂repository\n┃ ┃ ┃ ┃ ┃ ┣ 📂service\n┃ ┃ ┃ ┃ ┃ ┃ ┗ 📂impl\n┃ ┃ ┃ ┃ ┃ ┣ 📂util\n┃ ┃ ┗ ┗ ┗ ┗ 📜OpenRmWebDemoApplication.java\n┃ ┗ 📂resources\n┗ 📂test\n┃ ┣ 📂java\n┃ ┃ ┣ 📂com\n┃ ┃ ┃ ┣ 📂kt\n┗ ┗ ┗ ┗ ┗ 📂orm\n</code></pre>\n<ul>\n<li>\n<p>src/main/java/com/kt/orm</p>\n<ul>\n<li>config: Keycloak, SpringFox, 변수 설정 파일</li>\n<li>constant</li>\n<li>controller: RestController 파일</li>\n<li>domain: Entity Class 파일</li>\n<li>dto</li>\n<li>\n<p>exception</p>\n<ul>\n<li>handler</li>\n</ul>\n</li>\n<li>filter: Logging Filter 파일</li>\n<li>model: Response Class 파일</li>\n<li>repository: JPA Repository 파일</li>\n<li>\n<p>service</p>\n<ul>\n<li>serviceImpl</li>\n</ul>\n</li>\n<li>util: Converter, WebClient Util 파일</li>\n</ul>\n</li>\n<li>\n<p>resource</p>\n<ul>\n<li>application.yml</li>\n<li>messages.properties</li>\n</ul>\n</li>\n</ul>","id":"e9162063-b63e-567c-941b-feaf9f9a63f8"},"allPosts":{"edges":[{"node":{"id":"f5d1f1a7-7c2c-5f6a-9046-a6fe333a0e41"},"next":{"fields":{"slug":"/posts/kafka/"},"frontmatter":{"title":"Kafka"}},"previous":null},{"node":{"id":"827bacda-b789-58c1-b114-dd1a84d2cf0b"},"next":{"fields":{"slug":"/posts/tdd-sample-project/"},"frontmatter":{"title":"TDD SAMPLE PROJECT"}},"previous":{"fields":{"slug":"/posts/spring-integration-구조/"},"frontmatter":{"title":"Spring Integration 구조"}}},{"node":{"id":"fe264f59-bd9f-53c6-97e3-5d09ab013a63"},"next":{"fields":{"slug":"/posts/e-tas-server-to-server-연동-batch/"},"frontmatter":{"title":"eTAS Server to Server 연동 Batch"}},"previous":{"fields":{"slug":"/posts/kafka/"},"frontmatter":{"title":"Kafka"}}},{"node":{"id":"24b2dd59-8191-53ef-a9a4-d121eb896a0e"},"next":{"fields":{"slug":"/posts/spring-batch/"},"frontmatter":{"title":"Spring Batch"}},"previous":{"fields":{"slug":"/posts/tdd-sample-project/"},"frontmatter":{"title":"TDD SAMPLE PROJECT"}}},{"node":{"id":"7b317632-317d-580c-bfa6-c53f96edeb52"},"next":{"fields":{"slug":"/posts/react-project-개발기/"},"frontmatter":{"title":"React Project 개발기"}},"previous":{"fields":{"slug":"/posts/e-tas-server-to-server-연동-batch/"},"frontmatter":{"title":"eTAS Server to Server 연동 Batch"}}},{"node":{"id":"e29c2d7f-1fd2-5913-a904-11996c231f54"},"next":{"fields":{"slug":"/posts/hadoop/"},"frontmatter":{"title":"Hadoop"}},"previous":{"fields":{"slug":"/posts/spring-batch/"},"frontmatter":{"title":"Spring Batch"}}},{"node":{"id":"7f695fca-e5ce-5c55-970b-e8855f99b61a"},"next":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}},"previous":{"fields":{"slug":"/posts/react-project-개발기/"},"frontmatter":{"title":"React Project 개발기"}}},{"node":{"id":"9f46ad6e-455d-53e9-8d4c-4794e5af39dd"},"next":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}},"previous":{"fields":{"slug":"/posts/hadoop/"},"frontmatter":{"title":"Hadoop"}}},{"node":{"id":"7470f1ce-f71d-5772-a8be-806ed3f7cc66"},"next":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}},"previous":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}}},{"node":{"id":"27ea8f29-94a3-5302-a637-efd0af842208"},"next":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}},"previous":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}}},{"node":{"id":"c54308e0-d7a2-5d1c-b8ae-ecbfd04ed1ac"},"next":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}},"previous":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}}},{"node":{"id":"c8b65dec-7fef-5ef0-a515-27ae182dff3e"},"next":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}},"previous":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}}},{"node":{"id":"6814abc2-41a1-520c-bd24-a8d2d02424fb"},"next":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}},"previous":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}}},{"node":{"id":"2fa87adf-6f94-54db-a8e4-7ab4990ba5e6"},"next":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}},"previous":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}}},{"node":{"id":"2311c1d2-b785-582e-a9a9-d80750b5d505"},"next":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}},"previous":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}}},{"node":{"id":"54319bda-39af-5fa4-9eee-7f84ee580c1a"},"next":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}},"previous":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}}},{"node":{"id":"443ae298-350d-531c-a42c-34e0acb0cdd8"},"next":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}},"previous":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}}},{"node":{"id":"2e8c37a8-a44a-5356-b617-dc7b22034c2a"},"next":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}},"previous":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}}},{"node":{"id":"64980158-2ad8-5c44-91a8-a0185a6d4f6b"},"next":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}},"previous":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}}},{"node":{"id":"5128821c-b701-5848-9979-bb91ec9c5836"},"next":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}},"previous":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}}},{"node":{"id":"d4549afd-0095-5810-b492-b843ca6e2f88"},"next":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}}},{"node":{"id":"e46642ac-6d65-51b8-a535-21a9e3eabb56"},"next":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}}},{"node":{"id":"46426481-29ee-5d00-aa6c-cf05d52490f6"},"next":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}},"previous":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}}},{"node":{"id":"6eed9dfa-e294-5b19-a225-cd43d6cb982a"},"next":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}},"previous":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}}},{"node":{"id":"f77c8cbf-3a58-53fc-bd32-592702676a11"},"next":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}},"previous":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}}},{"node":{"id":"f016fc75-8476-5493-8ac1-e2862773f3e7"},"next":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}},"previous":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}}},{"node":{"id":"9f5a9a91-7af6-5ca3-b20f-d6e177e46c68"},"next":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}},"previous":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}}},{"node":{"id":"b4e07799-70a4-523d-90ec-741e18230194"},"next":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}},"previous":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}}},{"node":{"id":"571df319-d1dd-59b6-a588-7a5db12c6b3d"},"next":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}},"previous":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}}},{"node":{"id":"ef05bf06-2d53-5323-820b-98f46a906289"},"next":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}},"previous":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}}},{"node":{"id":"a78eb59a-78b3-5c86-bcc2-f09ea58fab23"},"next":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}},"previous":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}}},{"node":{"id":"3c37f3d1-7097-5528-a31b-12bcdcd937ab"},"next":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}},"previous":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}}},{"node":{"id":"fe690dd1-ec0c-544b-a44f-131d80987565"},"next":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}},"previous":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}}},{"node":{"id":"b8c8c26f-09bc-5759-8a7e-c81ffbc8f2c0"},"next":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}},"previous":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}}},{"node":{"id":"6268f141-e6af-5f89-a55b-2174ef57651f"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}}},{"node":{"id":"1a663d51-139e-500f-a209-04faaebd2e85"},"next":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}},"previous":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}}},{"node":{"id":"b227a2c1-7853-5450-a1be-f3e1c83307b4"},"next":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"80979747-a7b7-5e5d-81bb-30729e2e16bd"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}}},{"node":{"id":"a82c048c-1eea-54e3-912d-ae875640e04e"},"next":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}},"previous":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}}},{"node":{"id":"18c2a54b-1a71-511c-824c-f437be00f3ef"},"next":{"fields":{"slug":"/posts/tomcat-사용법/"},"frontmatter":{"title":"Tomcat 사용법"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"d2056881-058f-5f23-88ec-cf613dff77f0"},"next":{"fields":{"slug":"/posts/web-rtc/"},"frontmatter":{"title":"WebRTC"}},"previous":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}}},{"node":{"id":"d54a4c19-013d-538a-893d-ff8f62d34d7a"},"next":null,"previous":{"fields":{"slug":"/posts/tomcat-사용법/"},"frontmatter":{"title":"Tomcat 사용법"}}}]}},"pageContext":{"id":"e9162063-b63e-567c-941b-feaf9f9a63f8"}},"staticQueryHashes":["2001315320"]}