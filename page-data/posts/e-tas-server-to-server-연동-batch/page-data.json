{"componentChunkName":"component---src-templates-single-post-js","path":"/posts/e-tas-server-to-server-연동-batch/","result":{"data":{"post":{"frontmatter":{"meta":{"title":"test meta title","description":"test meta description","noindex":null,"canonicalLink":null},"title":"eTAS Server to Server 연동 Batch","template":"SinglePost","subtitle":null,"date":"March 16th, 2022","categories":[{"category":"Project"}]},"html":"<h1>eTAS Server to Server 연동 Batch</h1>\n<h2>0. 시스템 연동 정보</h2>\n<table>\n<thead>\n<tr>\n<th>시스템</th>\n<th>인스턴스</th>\n<th>세부 정보</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PPAS</td>\n<td>추후 기재</td>\n<td>추후 기재(table)</td>\n<td>운행차량, 사업자 번호 조회를 위한 연동</td>\n</tr>\n<tr>\n<td>MongoDB</td>\n<td>추후 기재</td>\n<td>추후 기재 (collection)</td>\n<td>운행차량별 운행 기록 정보 조회를 위한 연동</td>\n</tr>\n<tr>\n<td>Redis</td>\n<td>1</td>\n<td>추후 기재(Keys)</td>\n<td>PPAS 에서 가져온 정보 Provisioning, 교통안전공단 정보 Caching</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h2>1. 개발환경 세팅</h2>\n<table>\n<thead>\n<tr>\n<th>항목</th>\n<th>버전</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Java</td>\n<td>openjdk-17.0.2</td>\n</tr>\n<tr>\n<td>gradle</td>\n<td>7.4</td>\n</tr>\n<tr>\n<td>springboot</td>\n<td>2.6.3</td>\n</tr>\n</tbody>\n</table>\n<br>\n<p><strong>로컬 개발 환경 셋팅을 위한 Postgres, MongoDB, Redis Setting</strong></p>\n<ol>\n<li>\n<p>Redis (for Mac)</p>\n<pre><code class=\"language-shell\">brew install redis\nbrew services start redis\n</code></pre>\n</li>\n<li>\n<p>MongoDB, Postgres (with docker-compose)</p>\n<p>아래 기재한 docker-compose.yaml 파일을 활용하여 다음 명령어를 입력합니다.</p>\n<pre><code class=\"language-shell\">docker-compose -f docker-compose.yaml up -d\n</code></pre>\n<pre><code class=\"language-yaml\">version: '3.1'\nservices:\n  mongo:\n    image: mongo\n    restart: always\n    container_name: mongo\n    ports:\n      - \"27017:27017\"\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: test1234\n      MONGO_INITDB_DATABASE: test_db\n  postgres:\n    image: postgres:latest\n    container_name: postgres\n    restart: always\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_USER: admin\n      POSTGRES_PASSWORD: test1234\n      POSTGRES_DB: testdb\n    volumes:\n      - \"/Users/hyunjeeoh/docker/db/init.sql\"\n#  redis:\n#    image: redis\n#    restart: always\n#    ports:\n#      - \"6379:6379\"\n</code></pre>\n<p>PostgreSQL 접속하기</p>\n<pre><code class=\"language-shell\">docker exec -it postgres /bin/bash\n</code></pre>\n<p>DB 한번에 종료하기  </p>\n<pre><code class=\"language-shell\">docker-compose down\n</code></pre>\n</li>\n</ol>\n<h2>2. Build &#x26; Deploy</h2>\n<p><strong>Build</strong></p>\n<pre><code class=\"language-shell\">./gradlew build\n</code></pre>\n<p><strong>Deploy</strong></p>\n<pre><code class=\"language-shell\">java -jar ETASSubmissionBatch-1.0.0.jar\n</code></pre>\n<h2>3. 전송상태 업데이트 API 개발</h2>\n<h3>설계 내용</h3>\n<ol>\n<li>최승훈 대리에게 파일그룹키 전달 받은 후 파일그룹키로 운행파일수집, 분석결과 테이블 조회</li>\n<li>파일정상여부와 파일키 리스트 가져오기</li>\n<li>운행전송상태 업데이트 API 전송</li>\n</ol>\n<h3>개발 내용</h3>\n<ol>\n<li>\n<p>로컬 DB에 운행파일수집, 분석결과 테이블 생성<br>\n<a href=\"https://intrepidgeeks.com/tutorial/using-docker-compose-to-automatically-create-database-environment-and-schema\">docker-compose를 활용한 DB 환경 및 스키마 생성 자동화</a></p>\n<pre><code class=\"language-shell\">docker exec -it postgres /bin/bash\nsu - postgres \npsql --username admin --dbname testdb\n</code></pre>\n<blockquote>\n<p>psql 명령어</p>\n<ul>\n<li>\\list(or \\l) : 전체 Database Instance 목록</li>\n<li>\\dt : 접속한 DB Instance의 Table 목록</li>\n<li>\\ds : Sequence 목록</li>\n<li>\\df : Function 목록</li>\n<li>\\dv : View 목록</li>\n<li>\\du : User 목록</li>\n</ul>\n</blockquote>\n<pre><code class=\"language-sql\">-- Creation of mvmn_file_colec table\nCREATE TABLE IF NOT EXISTS public.mvmn_file_colec (\n  ccom_id character varying(10) COLLATE pg_catalog.\"default\" NOT NULL,\n  car_id character varying(30) COLLATE pg_catalog.\"default\" NOT NULL,\n  inner_chk_dt timestamp without time zone NOT NULL,\n  grp_key character varying(14) COLLATE pg_catalog.\"default\",\n  car_no character varying(20) COLLATE pg_catalog.\"default\",\n  req_cmd character varying(3) COLLATE pg_catalog.\"default\",\n  login_id character varying(20) COLLATE pg_catalog.\"default\",\n  secure_key character varying(20) COLLATE pg_catalog.\"default\",\n  enterp_code character varying(5) COLLATE pg_catalog.\"default\",\n  file_name character varying(40) COLLATE pg_catalog.\"default\",\n  file_size numeric(5,0),\n  file_type character varying(1) COLLATE pg_catalog.\"default\",\n  model_name character varying(20) COLLATE pg_catalog.\"default\",\n  type_cd character varying(9) COLLATE pg_catalog.\"default\",\n  bizr_no character varying(250) COLLATE pg_catalog.\"default\",\n  driver_code character varying(18) COLLATE pg_catalog.\"default\",\n  drive_date character varying(8) COLLATE pg_catalog.\"default\",\n  drive_start_time timestamp without time zone,\n  drive_end_time timestamp without time zone,\n  drive_sumdist numeric(10,3),\n  verify_errcode character varying(50) COLLATE pg_catalog.\"default\",\n  file_standard character varying(1) COLLATE pg_catalog.\"default\",\n  cretr_id character varying(20) COLLATE pg_catalog.\"default\" NOT NULL,\n  cret_dt timestamp without time zone NOT NULL,\n  cret_ipadr character varying(15) COLLATE pg_catalog.\"default\",\n  amdr_id character varying(20) COLLATE pg_catalog.\"default\" NOT NULL,\n  amd_dt timestamp without time zone NOT NULL,\n  amd_ipadr character varying(15) COLLATE pg_catalog.\"default\",\n  req_appcode character varying(3) COLLATE pg_catalog.\"default\",\n  CONSTRAINT mvmn_file_colec_pk PRIMARY KEY (ccom_id, car_id, inner_chk_dt)\n)\n\nWITH ( autovacuum_enabled = TRUE ) TABLESPACE pg_default;\n\nALTER TABLE public.mvmn_file_colec OWNER to admin;\n\nGRANT ALL ON TABLE public.mvmn_file_colec TO admin;\n\n\n-- Creation of anal_result table\nCREATE TABLE IF NOT EXISTS public.anal_result (\n  ccom_id character varying(10) COLLATE pg_catalog.\"default\" NOT NULL,\n  car_id character varying(30) COLLATE pg_catalog.\"default\" NOT NULL,\n  inner_chk_dt timestamp without time zone NOT NULL,\n  trm_dt timestamp without time zone NOT NULL,\n  rcv_dt timestamp without time zone NOT NULL,\n  grp_key character varying(14) COLLATE pg_catalog.\"default\",\n  res_code character varying(10) COLLATE pg_catalog.\"default\",\n  res_msg character varying(100) COLLATE pg_catalog.\"default\",\n  file_key character varying(15) COLLATE pg_catalog.\"default\",\n  cretr_id character varying(20) COLLATE pg_catalog.\"default\" NOT NULL,\n  cret_dt timestamp without time zone NOT NULL,\n  cret_ipadr character varying(15) COLLATE pg_catalog.\"default\",\n  amdr_id character varying(20) COLLATE pg_catalog.\"default\" NOT NULL,\n  amd_dt timestamp without time zone NOT NULL,\n  amd_ipadr character varying(15) COLLATE pg_catalog.\"default\",\n  req_appcode character varying(3) COLLATE pg_catalog.\"default\",\n  CONSTRAINT anal_result_pk PRIMARY KEY (ccom_id, car_id, inner_chk_dt)\n)\n\nWITH ( autovacuum_enabled = TRUE ) TABLESPACE pg_default;\n\nALTER TABLE public.anal_result OWNER to admin;\n\nGRANT ALL ON TABLE public.anal_result TO admin;\n\n\n-- Filling of mvmn_file_colec\nINSERT INTO mvmn_file_colec VALUES('TCCOMID001', 'TESTA18TPKC122110', '2022-04-01 15:17:31.010679', '20220324935709', '11가1112', 'INS', 'kt', '', '8324',\n                                  '20220323-11가1112-S-01-DRIVER0.TXT', '81', 'S', 'TMODEL001', '16', '1308164643', 'DRIVER000111222334', '20220323', '2022-03-23 11:39:40.585', '2022-03-23 12:39:40.586', '100.000',\n                                  '', '5', 'FileValidJob', '2022-03-24 15:17:30.911353', '172.18.0.1', 'FileValidJob', '2022-03-24 15:17:30.911353', '172.18.0.1', 'CS5');\n\n-- Filling of anal_result\nINSERT INTO anal_result VALUES('TCCOMID001', 'TESTA18TPKC122110', '2022-04-01 15:17:31.010679', '2022-03-24 06:37:32.586507', '2022-04-01 06:37:32.586507', '20220324935709', '200' , '',\n                              '202203240603325', 'DriveRecordJob', '2022-03-24 06:37:32.586507', '172.18.0.1/32', 'DriveRecordJob', '2022-03-24 06:37:32.586507', '172.18.0.1/32', 'CS5');\nINSERT INTO anal_result VALUES('TCCOMID001', 'TESTA18TPKC122110', '2022-04-01 15:17:31.019839', '2022-03-24 06:37:32.586507', '2022-04-01 06:37:32.586507', '20220324935709', '200' , '',\n                              '202203240603326', 'DriveRecordJob', '2022-03-24 06:37:32.586507', '172.18.0.1/32', 'DriveRecordJob', '2022-03-24 06:37:32.586507', '172.18.0.1/32', 'CS5');\n</code></pre>\n<p>데이터 입력 결과 확인</p>\n<pre><code class=\"language-shell\">SELECT * FROM mvmn_file_colec;\nSELECT * FROM anal_result;\n</code></pre>\n</li>\n<li>\n<p>Domain(Entity), DTO class 생성<br>\n필요한 Domain(Entity), DTO class 생성</p>\n<ul>\n<li>MvmnFileCollect(Entity)</li>\n<li>\n<p>MvmnFileCollectDto</p>\n<ul>\n<li>엔티티에 포함되지 않지만 DB 조회 결과로 받고 싶은 속성 추가</li>\n</ul>\n</li>\n<li>\n<p>eTAS 파일전송상태 업데이트 API 요청/응답 class</p>\n<ul>\n<li>FileTrmStatusUpdateRequest</li>\n<li>FileTrmStatusUpdateResponse</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Domain(Entity)와 DTO  </p>\n<ul>\n<li><a href=\"https://velog.io/@linger0310/DDD\">DTO, DAO(=Repository), Domain(=Entity)</a>  </li>\n<li><a href=\"https://tecoble.techcourse.co.kr/post/2021-04-25-dto-layer-scope/\">DTO의 사용 범위에 대하여</a></li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p>Service 생성<br>\n그룹키로 운행정보수집파일 조회하여 file<em>Key, file</em>Standard 값 가져오기</p>\n<ul>\n<li>\n<p>Mapper 생성 후 SQL 쿼리문 작성 (Mybatis 사용)</p>\n<pre><code class=\"language-xml\">&#x3C;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&#x3C;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n&#x3C;mapper namespace=\"com.kt.ccp.etas.mapper.FileTrmStatusMapper\">\n  &#x3C;select id=\"selectMvmnFileCollectListByGrpKey\" resultType=\"com.kt.ccp.etas.dto.MvmnFileCollectDto\" parameterType=\"java.lang.String\">\n      SELECT\n          M.ccom_id as \"ccomId\"\n          , M.car_id AS \"carId\"\n          , M.inner_chk_dt AS \"innerCheckDate\"\n          , M.grp_key AS \"grpKey\"\n          , A.file_key AS \"fileKey\"\n          , M.file_standard AS \"fileStandard\"\n      FROM mvmn_file_colec M INNER JOIN anal_result A\n          ON M.grp_key = A.grp_key\n              AND M.ccom_id = A.ccom_id\n              AND M.car_id = A.car_id\n      WHERE M.grp_key = #{grpKey}\n  &#x3C;/select>\n&#x3C;/mapper>\n</code></pre>\n</li>\n</ul>\n<p>전송상태 업데이트 API 호출</p>\n<ul>\n<li>조회한 데이터로 query parameter(FileTrmStatusUpdateRequest) 생성</li>\n<li>\n<p>MultiValueMap&#x3C;String, String> 값으로 변환</p>\n<ul>\n<li>parameter 검증 필요</li>\n</ul>\n</li>\n<li>RestTemplate 사용하여 eTAS에 파일전송상태 업데이트 API 호출 (WebClient 사용 시 parameter 값 받지 못하는 현상 발생하여 RestTemplate 이용)</li>\n</ul>\n</li>\n<li>\n<p>Test Code 작성</p>\n<p>dependency 추가 </p>\n<ul>\n<li>\n<p>application.yaml</p>\n<pre><code class=\"language-yaml\">dependencies {\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n    testImplementation 'org.springframework.batch:spring-batch-test'\n    testImplementation \"org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.2.2\"\n    testCompileOnly 'org.projectlombok:lombok'\n    testAnnotationProcessor 'org.projectlombok:lombok'\n}\n</code></pre>\n</li>\n</ul>\n<p>테스트 클래스 생성</p>\n<ul>\n<li>\n<p><code>FileTrmStatusUpdateService 클래스 테스트</code></p>\n<pre><code class=\"language-java\">@Slf4j\n@SpringBootTest\n@AutoConfigureMockMvc\n@AutoConfigureMockRestServiceServer\n@AutoConfigureMybatis\n@Transactional\n@ImportAutoConfiguration(CommonDBConfig.class)\n@DisplayName(\"FileTrmStatusUpdateService 클래스\")\n@Sql(\"/fileTrmStatusUpdateTestData.sql\")\npublic class FileTrmStatusUpdateServiceTests {\n\n}\n</code></pre>\n<ul>\n<li><code>@SpringBootTest</code> : Spring Boot 기반 테스트 클래스에 지정</li>\n<li><code>@ImportAutoConfiguration(CommonDBConfig.class)</code> : DB 연동 설정</li>\n<li><code>@AutoConfigureMybatis</code> : Mybatis 설정</li>\n<li><code>@Sql</code> : 테스트 테이블 및 데이터 삽입</li>\n<li><code>@Transactional</code> : 사용하여 테스트 종료 후 자동 rollback)</li>\n</ul>\n</li>\n</ul>\n<p>FileTrmStatusUpdateService 클래스 테스트</p>\n<ul>\n<li>\n<p>테스트 시나리오</p>\n<ol>\n<li>\n<p>테스트 데이터 존재 여부 확인</p>\n<ul>\n<li>필요 데이터: 운행파일수집 테이블 (mvmn<em>file</em>colec),  분석결과 테이블 (anal_result)</li>\n<li>데이터 조회 예상 결과 확인</li>\n</ul>\n</li>\n<li>\n<p>파라미터 유효성 테스트</p>\n<ul>\n<li>파일전송상태 업데이트 서비스 호출 시 전달받는 <code>grpKey</code>가 null 일 때 <code>NullPointerException</code> 처리되는지 확인</li>\n<li>\n<p>파일전송상태 업데이트 API 호출 시 전달하는 query parameter 검증</p>\n<ul>\n<li>입력한 테스트 데이터로 만든 parameter와 일치하는지</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>API 테스트</p>\n<ul>\n<li>API 호출하는 URI 및 Encoding 결과 검증 (query parameter 포함)</li>\n<li>\n<p>API 응답 결과 Status Code, Response Body 검증</p>\n<ul>\n<li>성공 케이스</li>\n<li>실패 케이스</li>\n<li>필수 파라미터 없는 경우, 401</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>테스트 코드</p>\n<pre><code class=\"language-java\">@Slf4j\n@SpringBootTest\n@AutoConfigureMockRestServiceServer\n@AutoConfigureMybatis\n@Transactional\n@ImportAutoConfiguration(CommonDBConfig.class)\n@DisplayName(\"FileTrmStatusUpdateService 클래스\")\n@Sql(\"/fileTrmStatusUpdateTestData.sql\")\npublic class FileTrmStatusUpdateServiceTests {\n    private static final String expectedCarId = \"TESTA18TPKC122110\";\n    private static final String expectedCcomId = \"TCCOMID001\";\n    private static final LocalDateTime expectedInnerChkDt = LocalDateTime.parse(\"2022-03-24T15:17:31.010679\");\n    private static final String expectedGrpKey = \"20220324935708\";\n    private static final String expectedFileKey1 = \"202203240603325\";\n    private static final String expectedFileKey2 = \"202203240603326\";\n    private static final String expectedFileStandard = \"5\";\n    private static final List&#x3C;MvmnFileCollectDto> expectedList = Arrays.asList(\n            MvmnFileCollectDto.builder()\n                .ccomId(expectedCcomId)\n                .carId(expectedCarId)\n                .innerCheckDate(expectedInnerChkDt)\n                .grpKey(expectedGrpKey)\n                .fileKey(expectedFileKey1)\n                .fileStandard(expectedFileStandard)\n                .build(),\n            MvmnFileCollectDto.builder()\n                .ccomId(expectedCcomId)\n                .carId(expectedCarId)\n                .innerCheckDate(expectedInnerChkDt)\n                .grpKey(expectedGrpKey)\n                .fileKey(expectedFileKey2)\n                .fileStandard(expectedFileStandard)\n                .build());\n    private static final String expectedItems = \"\"\"\n        [{\"grp_Key\":\"20220324935708\",\"file_Key\":\"202203240603325\",\"file_Standard\":\"5\"}, {\"grp_Key\":\"20220324935708\",\"file_Key\":\"202203240603326\",\"file_Standard\":\"5\"}]\"\"\";\n\n    @Autowired\n    FileTrmStatusUpdateService fileTrmStatusUpdateService;\n\n    @Autowired\n    FileTrmStatusMapper fileTrmStatusMapper;\n\n    @Autowired\n    MockRestServiceServer mockRestServiceServer;\n\n    @Autowired\n    EtasUrlConfig etasUrlConfig;\n\n    @BeforeAll\n    static void testSetUp() {\n    }\n\n    @BeforeEach\n    void setUp() {\n    }\n\n    @Nested\n    @DisplayName(\"파일전송상태 업데이트 테스트 데이터 검증\")\n    class FileTrmStatusUpdateDataTest {\n        @Test\n        @DisplayName(\"테스트 데이터 조회 결과 정상\")\n        void doExistTestData() throws IOException {\n            var actualList = fileTrmStatusMapper.selectMvmnFileCollectListByGrpKey(expectedGrpKey);\n\n            assertThat(actualList).isEqualTo(expectedList);\n        }\n\n        @Test\n        @DisplayName(\"테스트 파라미터 정상\")\n        void isValidTestData() throws IOException {\n            String actualItems = fileTrmStatusUpdateService.getUpdateRequestItems(expectedList);\n\n            assertThat(actualItems).isEqualTo(expectedItems);\n        }\n    }\n\n    @Nested\n    @DisplayName(\"파일전송상태 업데이트 API 테스트\")\n    class FileTrmStatusUpdateServiceTest {\n        @Nested\n        @DisplayName(\"성공 케이스\")\n        class FileTrmStatusUpdateServiceSuccessTest {\n            @Test\n            @DisplayName(\"정상 200 리턴(MockRestServiceServer)\")\n            void isFileTrmStatusUpdateServiceSuccess() {\n                final String expectedResCode = \"200\";\n                final String expectedJsonResponse = \"\"\"\n                        {\n                            \"res_Code\": \"200\",\n                            \"res_Msg\": \"\"\n                        }\"\"\";\n\n                FileTrmStatusUpdateRequest expectedRequest = new FileTrmStatusUpdateRequest();\n                expectedRequest.setItems(expectedItems);\n\n                URI expectedUri = UriComponentsBuilder.fromPath(ApiEndpoints.ETAS_FILE_STATUS)\n                        .scheme(\"http\")\n                        .host(etasUrlConfig.getBaseHost())\n                        .port(etasUrlConfig.getUploadPort())\n                        .queryParams(MultiValueMapConverter.convert(expectedRequest))\n                        .build()\n                        .toUri();\n\n                mockRestServiceServer\n                        .expect(requestTo(expectedUri))\n                        .andExpect(method(HttpMethod.POST))\n                        .andRespond(withSuccess(expectedJsonResponse, MediaType.APPLICATION_JSON));\n\n                FileTrmStatusUpdateResponse actualResponse = fileTrmStatusUpdateService.updateFileTrmStatus(expectedGrpKey);\n\n                assertThat(actualResponse).isNotNull();\n                assertThat(actualResponse.getRes_Code()).isEqualTo(expectedResCode);\n            }\n        }\n\n        @Nested\n        @DisplayName(\"실패 케이스\")\n        class FileTrmStatusUpdateServiceFailTest {\n            @Test\n            @DisplayName(\"grpKey NullPointerException 발생(MockRestServiceServer)\")\n            void isFileTrmStatusUpdateServiceThrowNullPointerException() {\n                final String expectedJsonResponse = \"\"\"\n                        {\n                            \"res_Code\": \"200\",\n                            \"res_Msg\": \"\"\n                        }\"\"\";\n\n                FileTrmStatusUpdateRequest expectedRequest = new FileTrmStatusUpdateRequest();\n                expectedRequest.setItems(expectedItems);\n\n                URI expectedUri = UriComponentsBuilder.fromPath(ApiEndpoints.ETAS_FILE_STATUS)\n                        .scheme(\"http\")\n                        .host(etasUrlConfig.getBaseHost())\n                        .port(etasUrlConfig.getUploadPort())\n                        .queryParams(MultiValueMapConverter.convert(expectedRequest))\n                        .build()\n                        .toUri();\n\n                mockRestServiceServer\n                        .expect(requestTo(expectedUri))\n                        .andExpect(method(HttpMethod.POST))\n                        .andRespond(withSuccess(expectedJsonResponse, MediaType.APPLICATION_JSON));\n\n                Assertions.assertThrows(NullPointerException.class, () -> fileTrmStatusUpdateService.updateFileTrmStatus(\"\"));\n            }\n\n            @Test\n            @DisplayName(\"잘못된 파라미터 401 리턴(MockRestServiceServer)\")\n            void isFileTrmStatusUpdateServiceReturn401() {\n                String expectedGrpKey = \"202001010000000\";\n                final String expectedResCode = \"401\";\n                final String expectedJsonResponse = \"\"\"\n                        {\n                            \"res_Code\": \"401\",\n                            \"res_Msg\": \"필수 파라미터 값이 없습니다.\"\n                        }\"\"\";\n\n                FileTrmStatusUpdateRequest expectedRequest = new FileTrmStatusUpdateRequest();\n\n                URI expectedUri = UriComponentsBuilder.fromPath(ApiEndpoints.ETAS_FILE_STATUS)\n                        .scheme(\"http\")\n                        .host(etasUrlConfig.getBaseHost())\n                        .port(etasUrlConfig.getUploadPort())\n                        .queryParams(MultiValueMapConverter.convert(expectedRequest))\n                        .build()\n                        .toUri();\n\n                mockRestServiceServer\n                        .expect(requestTo(expectedUri))\n                        .andExpect(method(HttpMethod.POST))\n                        .andRespond(withSuccess(expectedJsonResponse, MediaType.APPLICATION_JSON));\n\n                FileTrmStatusUpdateResponse actualResponse = fileTrmStatusUpdateService.updateFileTrmStatus(expectedGrpKey);\n\n                assertThat(actualResponse).isNotNull();\n                assertThat(actualResponse.getRes_Code()).isEqualTo(expectedResCode);\n            }\n        }\n    }\n\n    @AfterEach\n    void tearDown() {\n    }\n\n    @AfterAll\n    static void testTearDown() {\n    }\n}\n</code></pre>\n</li>\n</ul>\n<p>RestTemplateUtil 클래스 테스트 (RestTemplate)</p>\n<ul>\n<li>\n<p>테스트 시나리오</p>\n<ol>\n<li><code>RestTemplate의 postForEntity()</code> util 테스트</li>\n</ol>\n</li>\n<li>\n<p>테스트 코드</p>\n<pre><code class=\"language-java\">@Test\n@DisplayName(\"POST 호출 실패 RestTemplateException 발생 (postForEntity)\")\nvoid isPostForEntityMethodThrowsRestTemplateException() {\n    // given\n    URI expectedUri = UriComponentsBuilder\n            .fromPath(expectedPath)\n            .scheme(expectedScheme)\n            .host(expectedHost)\n            .port(expectedPort)\n            .build()\n            .toUri();\n    String expectedJsonRequest = \"\"\"\n            {\n                \"key1\": \"test1\",\n                \"key2\": \"test2\"\n            }\"\"\";\n    HttpHeaders expectedHeaders = new HttpHeaders();\n    expectedHeaders.setContentType(MediaType.APPLICATION_JSON);\n    HttpEntity&#x3C;String> expectedRequest = new HttpEntity&#x3C;>(expectedJsonRequest, expectedHeaders);\n    mockRestServiceServer.expect(requestTo(expectedUri))\n            .andExpect(method(HttpMethod.POST))\n            .andExpect(content().json(expectedJsonRequest))\n            .andExpect(content().contentType(MediaType.APPLICATION_JSON))\n            .andRespond(withServerError());\n    log.debug(expectedRequest.toString());\n\n    // when &#x26; then\n    Exception exception = assertThrows(RestTemplateException.class,\n            () -> RestTemplateUtil.postForEntity(expectedUri, expectedRequest, String.class));\n}\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>","id":"24b2dd59-8191-53ef-a9a4-d121eb896a0e"},"allPosts":{"edges":[{"node":{"id":"f5d1f1a7-7c2c-5f6a-9046-a6fe333a0e41"},"next":{"fields":{"slug":"/posts/kafka/"},"frontmatter":{"title":"Kafka"}},"previous":null},{"node":{"id":"827bacda-b789-58c1-b114-dd1a84d2cf0b"},"next":{"fields":{"slug":"/posts/tdd-sample-project/"},"frontmatter":{"title":"TDD SAMPLE PROJECT"}},"previous":{"fields":{"slug":"/posts/spring-integration-구조/"},"frontmatter":{"title":"Spring Integration 구조"}}},{"node":{"id":"fe264f59-bd9f-53c6-97e3-5d09ab013a63"},"next":{"fields":{"slug":"/posts/e-tas-server-to-server-연동-batch/"},"frontmatter":{"title":"eTAS Server to Server 연동 Batch"}},"previous":{"fields":{"slug":"/posts/kafka/"},"frontmatter":{"title":"Kafka"}}},{"node":{"id":"24b2dd59-8191-53ef-a9a4-d121eb896a0e"},"next":{"fields":{"slug":"/posts/spring-batch/"},"frontmatter":{"title":"Spring Batch"}},"previous":{"fields":{"slug":"/posts/tdd-sample-project/"},"frontmatter":{"title":"TDD SAMPLE PROJECT"}}},{"node":{"id":"7b317632-317d-580c-bfa6-c53f96edeb52"},"next":{"fields":{"slug":"/posts/react-project-개발기/"},"frontmatter":{"title":"React Project 개발기"}},"previous":{"fields":{"slug":"/posts/e-tas-server-to-server-연동-batch/"},"frontmatter":{"title":"eTAS Server to Server 연동 Batch"}}},{"node":{"id":"e29c2d7f-1fd2-5913-a904-11996c231f54"},"next":{"fields":{"slug":"/posts/hadoop/"},"frontmatter":{"title":"Hadoop"}},"previous":{"fields":{"slug":"/posts/spring-batch/"},"frontmatter":{"title":"Spring Batch"}}},{"node":{"id":"7f695fca-e5ce-5c55-970b-e8855f99b61a"},"next":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}},"previous":{"fields":{"slug":"/posts/react-project-개발기/"},"frontmatter":{"title":"React Project 개발기"}}},{"node":{"id":"9f46ad6e-455d-53e9-8d4c-4794e5af39dd"},"next":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}},"previous":{"fields":{"slug":"/posts/hadoop/"},"frontmatter":{"title":"Hadoop"}}},{"node":{"id":"7470f1ce-f71d-5772-a8be-806ed3f7cc66"},"next":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}},"previous":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}}},{"node":{"id":"27ea8f29-94a3-5302-a637-efd0af842208"},"next":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}},"previous":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}}},{"node":{"id":"c54308e0-d7a2-5d1c-b8ae-ecbfd04ed1ac"},"next":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}},"previous":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}}},{"node":{"id":"c8b65dec-7fef-5ef0-a515-27ae182dff3e"},"next":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}},"previous":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}}},{"node":{"id":"6814abc2-41a1-520c-bd24-a8d2d02424fb"},"next":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}},"previous":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}}},{"node":{"id":"2fa87adf-6f94-54db-a8e4-7ab4990ba5e6"},"next":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}},"previous":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}}},{"node":{"id":"2311c1d2-b785-582e-a9a9-d80750b5d505"},"next":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}},"previous":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}}},{"node":{"id":"54319bda-39af-5fa4-9eee-7f84ee580c1a"},"next":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}},"previous":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}}},{"node":{"id":"443ae298-350d-531c-a42c-34e0acb0cdd8"},"next":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}},"previous":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}}},{"node":{"id":"2e8c37a8-a44a-5356-b617-dc7b22034c2a"},"next":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}},"previous":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}}},{"node":{"id":"64980158-2ad8-5c44-91a8-a0185a6d4f6b"},"next":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}},"previous":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}}},{"node":{"id":"5128821c-b701-5848-9979-bb91ec9c5836"},"next":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}},"previous":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}}},{"node":{"id":"d4549afd-0095-5810-b492-b843ca6e2f88"},"next":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}}},{"node":{"id":"e46642ac-6d65-51b8-a535-21a9e3eabb56"},"next":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}}},{"node":{"id":"46426481-29ee-5d00-aa6c-cf05d52490f6"},"next":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}},"previous":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}}},{"node":{"id":"6eed9dfa-e294-5b19-a225-cd43d6cb982a"},"next":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}},"previous":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}}},{"node":{"id":"f77c8cbf-3a58-53fc-bd32-592702676a11"},"next":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}},"previous":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}}},{"node":{"id":"f016fc75-8476-5493-8ac1-e2862773f3e7"},"next":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}},"previous":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}}},{"node":{"id":"9f5a9a91-7af6-5ca3-b20f-d6e177e46c68"},"next":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}},"previous":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}}},{"node":{"id":"b4e07799-70a4-523d-90ec-741e18230194"},"next":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}},"previous":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}}},{"node":{"id":"571df319-d1dd-59b6-a588-7a5db12c6b3d"},"next":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}},"previous":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}}},{"node":{"id":"ef05bf06-2d53-5323-820b-98f46a906289"},"next":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}},"previous":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}}},{"node":{"id":"a78eb59a-78b3-5c86-bcc2-f09ea58fab23"},"next":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}},"previous":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}}},{"node":{"id":"3c37f3d1-7097-5528-a31b-12bcdcd937ab"},"next":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}},"previous":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}}},{"node":{"id":"fe690dd1-ec0c-544b-a44f-131d80987565"},"next":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}},"previous":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}}},{"node":{"id":"b8c8c26f-09bc-5759-8a7e-c81ffbc8f2c0"},"next":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}},"previous":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}}},{"node":{"id":"6268f141-e6af-5f89-a55b-2174ef57651f"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}}},{"node":{"id":"1a663d51-139e-500f-a209-04faaebd2e85"},"next":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}},"previous":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}}},{"node":{"id":"b227a2c1-7853-5450-a1be-f3e1c83307b4"},"next":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"80979747-a7b7-5e5d-81bb-30729e2e16bd"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}}},{"node":{"id":"a82c048c-1eea-54e3-912d-ae875640e04e"},"next":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}},"previous":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}}},{"node":{"id":"18c2a54b-1a71-511c-824c-f437be00f3ef"},"next":{"fields":{"slug":"/posts/tomcat-사용법/"},"frontmatter":{"title":"Tomcat 사용법"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"d2056881-058f-5f23-88ec-cf613dff77f0"},"next":{"fields":{"slug":"/posts/web-rtc/"},"frontmatter":{"title":"WebRTC"}},"previous":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}}},{"node":{"id":"d54a4c19-013d-538a-893d-ff8f62d34d7a"},"next":null,"previous":{"fields":{"slug":"/posts/tomcat-사용법/"},"frontmatter":{"title":"Tomcat 사용법"}}}]}},"pageContext":{"id":"24b2dd59-8191-53ef-a9a4-d121eb896a0e"}},"staticQueryHashes":["2001315320"]}