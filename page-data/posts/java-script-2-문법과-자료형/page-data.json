{"componentChunkName":"component---src-templates-single-post-js","path":"/posts/java-script-2-문법과-자료형/","result":{"data":{"post":{"frontmatter":{"meta":{"title":"test meta title","description":"test meta description","noindex":null,"canonicalLink":null},"title":"JavaScript (2) - 문법과 자료형","template":"SinglePost","subtitle":null,"date":"July 29th, 2021","categories":[{"category":"JavaScript"}]},"html":"<p><img src=\"https://gawoori.net/wp-content/uploads/2018/04/javascript-frameworks.jpg\" alt=\"javascript\"></p>\n<h1>JavaScript (2) - 문법과 자료형</h1>\n<h2>문법과 자료형</h2>\n<p>​\tJavaScript는 문법의 대부분을 Java와 C, C++로부터 차용하고 있으며, Awk, Perl, Python의 영향도 받았다.  </p>\n<ul>\n<li>JavaScript는 <strong>대소문자를 구별</strong>하며 <strong>유니코드</strong> 문자셋을 이용한다.  </li>\n<li>JavaScript에서는 명령을 Statement 라고 부르며, 세미콜론(<code>;</code>)으로 구분한다.</li>\n<li>JavaScript의 스크립트 소스는 왼쪽에서 오른쪽으로 탐색하면서 토큰, 제어 문자, 줄바꿈 문자, 주석이나 공백으로 이루어진 입력 element의 시퀀스로 변환된다. </li>\n<li>스페이스, 탭, 줄바꿈 문자는 공백으로 간주된다.</li>\n</ul>\n<h3>주석</h3>\n<pre><code class=\"language-javascript\">// 한 줄 주석\n\n/* \n * 여러 줄 주석 \n */\n</code></pre>\n<h3>선언</h3>\n<ol>\n<li>\n<p><code>var</code></p>\n<p>변수 선언과 동시에 값을 초기화</p>\n</li>\n<li>\n<p><code>let</code></p>\n<p>블록 범위(scope) 지역 변수를 선언. 동시에 값을 초기화</p>\n</li>\n<li>\n<p><code>const</code></p>\n<p>블록 범위 읽기 전용 상수를 선언</p>\n</li>\n</ol>\n<h4>변수</h4>\n<ul>\n<li>어플리케이션에서 값에 상징적인 이름으로 변수를 사용하며, 변수명은 식별자(identifier)라고 불리며 특정 규칙을 따른다.</li>\n<li>JavaScript 식별자는 문자, 밑줄(_), 달러 기호($)로 시작해야 하고, 이후는 숫자(0-9)일 수도 있다. </li>\n<li>JavaScript가 대소문자를 구분하기에, 문자는 \"A\"부터 \"Z\"(대문자)와 \"a\"부터 \"z\"(소문자)까지 모두 포함한다.</li>\n<li>ISO 8859-1 혹은 Unicode 문자(가령 å 나 ü)도 식별자에 사용할 수 있다. 또한 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals\">Unicode escape sequences</a>도 식별자에 문자로 사용할 수 있다.</li>\n</ul>\n<h4>변수 선언 및 할당</h4>\n<ul>\n<li>초기값 지정 없이 <code>var</code> 혹은 <code>let</code>문으로 선언된 변수는 <code>undefined</code> 값을 가진다. </li>\n<li>선언되지 않은 변수에 접근을 시도하는 경우 <code>ReferenceError</code> 예외가 발생한다.</li>\n<li>\n<p><code>undefined</code> 값은 <code>boolean</code> context에서 사용될 때 <code>false</code>로 동작한다.</p>\n<pre><code class=\"language-javascript\">var input;\nif(!input){\ndoFunction(); // undefined일 경우 실행되지 않음\n}\n</code></pre>\n</li>\n</ul>\n<h4>변수 범위</h4>\n<ul>\n<li>\n<p>전역변수</p>\n<p>어떤 함수의 바깥에 변수를 선언하면 현재 문서의 다른 코드에 해당 변수를 사용할 수 있다.  </p>\n<p>전역 변수는 사실 <em>global 객체</em>의 속성(property)이다. 웹 페이지에서 global 객체는 <code>window이므로,</code>windows.<em>variable</em>` 구문을 통해 전역 변수를 설정하고 접근할 수 있다.  </p>\n<p>그 결과, window 혹은 frame의 이름을 지정하여 한 window 혹은 frame에서 다른 window 혹은 frame에 선언된 전역 변수에 접근할 수 있다. 예를 들어, <code>phoneNumber</code> 라는 변수가 문서에 선언된 경우, iframe에서 <code>parent.phoneNumber</code>로 이 변수를 참조할 수 있다.  </p>\n</li>\n<li>\n<p>지역변수</p>\n<p>함수 내부에 변수를 선언하면 오직 그 함수 내에서만 사용할 수 있다.  </p>\n</li>\n</ul>\n<h4>변수 hoisting</h4>\n<ul>\n<li>\n<p>호이스팅이란 JavaScript의 특이한 점으로 예외를 받지 않고 나중에 선언된 변수를 참조할 수 있다는 것이다. 즉, JavaScript 변수가 어떤 의미에서 함수나 제어문의 최상단으로 올려지는 것을 말한다. 하지만 끌어올려진 변수는 <code>undefined</code> 값을 반환한다.변수를 사용하거나 참조한 후에 선언 및 초기화하더라도 여전히 <code>undefined</code>를 반환한다.  </p>\n<pre><code class=\"language-javascript\">/**\n* Example 1\n*/\nconsole.log(x === undefined); // logs \"true\"\nvar x = 3;\n\n\n/**\n* Example 2\n*/\n// undefined 값을 반환함.\nvar myvar = \"my value\";\n\n(function() {\nconsole.log(myvar); // undefined\nvar myvar = \"local value\";\n})();\n</code></pre>\n</li>\n<li>호이스팅 때문에 함수 내의 모든 <code>var</code>문은 가능한 함수 상단 근처에 두는 것이 좋으며 코드를 더욱 명확하게 만들어준다.  </li>\n</ul>\n<h4>함수 hoisting</h4>\n<ul>\n<li>\n<p>함수에서는 단지 함수 선언만 상단으로 끌어올려지며 함수 표현식은 그렇지 않다.  </p>\n<pre><code class=\"language-javascript\">/* 함수 선언 */\nfoo(); // \"bar\"\n\nfunction foo() {\nconsole.log('bar');\n}\n\n\n/* 함수 표현식 */\nbaz(); // TypeError: baz is not a function\n\nvar baz = function() {\nconsole.log('bar2');\n};\n</code></pre>\n</li>\n</ul>\n<h3>상수</h3>\n<ul>\n<li><code>const</code> 키워드로 읽기 전용 상수를 만들 수 있다. 상수 식별자의 구문은 변수 식별자와 같다. 문자, 밑줄이나 달러 기호로 시작해야 하고, 문자나 숫자, 밑줄을 포함할 수 있다.</li>\n<li>상수는 스크립트가 실행 중인 동안 대입을 통해 값을 바꾸거나 재선언될 수 없다. 값으로 초기화해야 한다.</li>\n<li>상수에 대한 범위 규칙은 <code>let</code> 블록 범위 변수와 동일하다. 만약 <code>const</code> 키워드가 생략된 경우에 식별자는 변수를 나타내는 것으로 간주된다.</li>\n<li>\n<p>상수는 같은 범위에 있는 함수나 변수와 동일한 이름으로 선언할 수 없다. 그러나, 상수에 할당된 객체의 속성과 배열의 내용은 보호되지 않는다.</p>\n<pre><code class=\"language-javascript\">// 보호되지 않는 객체의 속성\nconst MY_OBJECT = {'key': 'value'};\nMY_OBJECT.key = 'otherValue';\n\n// 보호되지 않는 배열의 내용\nconst MY_ARRAY = ['HTML','CSS'];\nMY_ARRAY.push('JAVASCRIPT');\nconsole.log(MY_ARRAY); //logs ['HTML','CSS','JAVASCRIPT'];\n</code></pre>\n</li>\n</ul>\n<h3>데이터 구조 및 형</h3>\n<h4>데이터 형</h4>\n<ul>\n<li>\n<p>최신 ECMAScript 표준은 7가지 데이터 형을 정의한다.</p>\n<ol>\n<li>Boolean</li>\n</ol>\n<p> true or false</p>\n<ol start=\"2\">\n<li>null</li>\n</ol>\n<p> null 값을 나타내는 특별한 키워드. Null, NULL과 다르다.</p>\n<ol start=\"3\">\n<li>undefined</li>\n</ol>\n<p> 값이 저장되어 있지 않은 최상위 속성</p>\n<ol start=\"4\">\n<li>Number</li>\n</ol>\n<p> 정수 또는 실수형 숫자</p>\n<ol start=\"5\">\n<li>String</li>\n</ol>\n<p> 문자열</p>\n<ol start=\"6\">\n<li>Symbol</li>\n</ol>\n<p> 인스턴스가 고유하고 불변인 데이터 형</p>\n<ol start=\"7\">\n<li>Object</li>\n</ol>\n</li>\n<li>데이터 형이 비교적 많지 않지만, 어플리케이션에 유용한 기능을 수행할 수 있다. </li>\n<li><code>객체</code>와 <code>함수</code>는 언어의 다른 기본 요소이다. 객체는 값을 위한 컨테이너, 함수는 어플리케이션이 수행할 수 있는 절차(procedure)로 생각할 수 있다.</li>\n</ul>\n<h4>자료형 변환</h4>\n<p>​\tJavaScript는 동적 형지정(정형) 언어다. 이는 변수를 선언할 때 데이터 형을 지정할 필요가 없음을 의미한다. 또한 데이터 형이 스크립트 실행 도중 필요에 의해 자동으로 변환됨을 뜻한다.</p>\n<h4>문자열을 숫자로 변환하기</h4>\n<p>​\t숫자를 나타내는 값이 문자열로 메모리에 있는 경우, 변환을 위한 메서드가 있다. </p>\n<ul>\n<li>\n<p><code>parseInt()</code></p>\n<p>오직 정수만 반환하므로, 소수에서는 사용성이 떨어진다. 또한, 항상 진법(Radix) 매개변수를 포함해야 한다. 진법 매개변수는 변환에 사용될 진법을 지정하는데 사용된다.</p>\n</li>\n<li><code>parseFloat()</code></li>\n<li>\n<p>문자열을 숫자로 변환하는 대안은 +(단항 더하기) 연산자이다.</p>\n<pre><code class=\"language-javascript\">\"1.1\" + \"1.1\" = \"1.11.1\"\n+\"1.1\" + +\"1.1\" = 2.2\n</code></pre>\n</li>\n</ul>\n<h3>literal</h3>\n<p>​\tJavaScript에서 값을 나타내기 위해 리터럴을 사용한다. 말 그대로 스크립트에 부여된 고정값으로 변수가 아니다.</p>\n<h4>배열 literal</h4>\n<ul>\n<li>배열 리터럴은 0개 이상의 식(expression) 목록이다.</li>\n<li>각 식은 배열 요소를 나타내고 대괄호(<code>[]</code>)로 묶인다. </li>\n<li>\n<p>배열 리터럴을 사용하여 배열을 만들 때, 그 요소로 지정된 값으로 초기화되고, 그 길이는 지정된 인수의 갯수로 설정된다.</p>\n<blockquote>\n<p>배열 리터럴은 일종의 객체 initializer이다.</p>\n</blockquote>\n</li>\n<li>배열이 최상단 스크립트에서 리터럴을 사용하여 만들어진 경우, JavaScript는 배열 리터럴을 포함한 식을 평가할 때마다 배열로 해석한다. </li>\n<li>함수에서 사용되는 리터럴은 함수가 호출될 때마다 생성된다.</li>\n<li>\n<p>모든 요소를 지정할 필요는 없지만 마지막 쉼표는 무시된다. 코드의 명확성과 유지보수성을 높이기 위해 명시적으로 <code>undefined</code>로 선언하는 것이 좋다.</p>\n<pre><code class=\"language-javascript\">// 배열의 길이는 3, fish[1]은 `undefined`\nvar fish = [\"Lion\", , \"Angel\"];\n\n// 배열의 길이는 4, myList[1], myList[3]은 `undefined`\nvar myList = ['home', , 'school', , ];\n</code></pre>\n</li>\n</ul>\n<h4>Boolean literal</h4>\n<ul>\n<li>Boolean 객체(true or false)의 리터럴 값을 가진다.</li>\n</ul>\n<h4>정수, 부동소수점 literal</h4>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Grammar_and_types#%EC%A0%95%EC%88%98\">정수</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Grammar_and_types#%EB%B6%80%EB%8F%99_%EC%86%8C%EC%88%98%EC%A0%90_%EB%A6%AC%ED%84%B0%EB%9F%B4\">부동 소수점 리터럴</a></li>\n</ul>\n<h4>객체 literal</h4>\n<ul>\n<li>객체 리터럴은 중괄호(<code>{}</code>)로 묶인 0개 이상인 객체의 속성명과 관련 값 쌍 목록이다. </li>\n<li>문의 시작에 객체 리터럴을 사용해서는 안된다. <code>{</code>가 블록의 시작으로 해석되기 때문에 오류를 이끌거나 의도한 대로 동작하지 않는다.</li>\n<li>\n<p>속성명으로 숫자나 문자열 리터럴을 사용하거나 또다른 객체 리터럴 내부에 객체를 중첩할 수도 있다.</p>\n<pre><code class=\"language-javascript\">var car = { myCar: \"Saturn\", getCar: carTypes(\"Honda\"), special: sales };\nvar car = { manyCars: {a: \"Saab\", \"b\": \"Jeep\"}, 7: \"Mazda\" };\n</code></pre>\n</li>\n<li>\n<p>객체 속성명은 빈 문자열 포함 어떤 문자열도 될 수 있다. 속성명이 유효한 JavaScript 식별자나 숫자가 아닌 경우, 따옴표로 묶여야 한다. 또한 유효한 식별자가 아닌 속성명은 점(<code>.</code>) 속성으로 접근할 수 없다. 대신 배열 같은 표기법(\"<code>[]</code>\")으로 접근하고 값을 설정할 수 있다.</p>\n<pre><code class=\"language-javascript\">var unusualPropertyNames = {\n\"\": \"An empty string\",\n\"!\": \"Bang!\"\n}\nconsole.log(unusualPropertyNames.\"\");   // SyntaxError: Unexpected string\nconsole.log(unusualPropertyNames[\"\"]);  // An empty string\nconsole.log(unusualPropertyNames.!);    // SyntaxError: Unexpected token !\nconsole.log(unusualPropertyNames[\"!\"]); // Bang!\n</code></pre>\n</li>\n</ul>\n<h4>향상된 객체 literal</h4>\n<ul>\n<li>ES2015에서 객체 리터럴은 구성에서 프로토타입 설정, foo: foo 할당을 위한 단축 표기, 메서드 정의, super 클래스 호출 및 식으로 동적인 속성명 계산을 지원하기 위해 확장됐다. 그에 따라 객체 리터럴 및 클래스 선언이 함께 더 가까워지고, 객체 기반 설계는 같은 일부 편의기능으로 득을 볼 수 있다.</li>\n</ul>\n<h3>정규식 literal</h3>\n<ul>\n<li>\n<p>정규식 literal은 <code>/</code>사이에 감싸인 패턴이다.</p>\n<pre><code class=\"language-javascript\">var re = /ab+c/;\n</code></pre>\n</li>\n</ul>\n<h3>문자열 literal</h3>\n<ul>\n<li>큰 따옴표 쌍이나 작은 따옴표 쌍으로 구분되어야 한다.</li>\n</ul>\n<h4>특수 문자 사용</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">문자</th>\n<th align=\"left\">뜻</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>\\0</code></td>\n<td align=\"left\">Null Byte</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\b</code></td>\n<td align=\"left\">Backspace</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\f</code></td>\n<td align=\"left\">Form feed</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\n</code></td>\n<td align=\"left\">New line</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\r</code></td>\n<td align=\"left\">Carriage return</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\t</code></td>\n<td align=\"left\">Tab</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\v</code></td>\n<td align=\"left\">Vertical tab</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\'</code></td>\n<td align=\"left\">Apostrophe 혹은 작은 따옴표</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\\"</code></td>\n<td align=\"left\">큰 따옴표</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\\\</code></td>\n<td align=\"left\">백슬래시</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\XXX</code></td>\n<td align=\"left\">Latin-1 인코딩 문자는 0 - 377 사이 8진수 3자리까지 지정될 수 있습니다. 예를 들어, \\251은 copyright 심볼을 표현하는 8진수 시퀀스입니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\xXX</code></td>\n<td align=\"left\">Latin-1 인코딩 문자는 00 - FF 사이의 16진수 2자리로 지정될 수 있습니다. 예를 들어, \\xA9는 copyright 심볼을 표현하는 16진수 시퀀스입니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\uXXXX</code></td>\n<td align=\"left\">유니코드 문자는 16진수 4자리로 지정될 수 있습니다. 예를 들어, \\u00A9는 copyright 심볼을 표현하는 유니코드 열입니다. <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals\">Unicode escape sequences</a>를 참고하세요.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\u{XXXXX}</code></td>\n<td align=\"left\">유니코드 코드 포인트 이스케이프. 예를 들어, \\u{2F804}는 간단한 유니코드 이스케이프 \\uD87E\\uDC04와 같습니다.</td>\n</tr>\n</tbody>\n</table>\n<h4>문자 이스케이프</h4>\n<ul>\n<li>표에 없는 문자의 경우 백슬래시는 무시되지만, 이 용법은 더 이상 사용되지 않으며 사용을 피해야 한다.</li>\n</ul>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide\">MDN - JavaScript 안내서</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference\">MDN - JavaScript 참고서</a></li>\n</ul>","id":"27ea8f29-94a3-5302-a637-efd0af842208"},"allPosts":{"edges":[{"node":{"id":"f5d1f1a7-7c2c-5f6a-9046-a6fe333a0e41"},"next":{"fields":{"slug":"/posts/kafka/"},"frontmatter":{"title":"Kafka"}},"previous":null},{"node":{"id":"827bacda-b789-58c1-b114-dd1a84d2cf0b"},"next":{"fields":{"slug":"/posts/tdd-sample-project/"},"frontmatter":{"title":"TDD SAMPLE PROJECT"}},"previous":{"fields":{"slug":"/posts/spring-integration-구조/"},"frontmatter":{"title":"Spring Integration 구조"}}},{"node":{"id":"fe264f59-bd9f-53c6-97e3-5d09ab013a63"},"next":{"fields":{"slug":"/posts/e-tas-server-to-server-연동-batch/"},"frontmatter":{"title":"eTAS Server to Server 연동 Batch"}},"previous":{"fields":{"slug":"/posts/kafka/"},"frontmatter":{"title":"Kafka"}}},{"node":{"id":"24b2dd59-8191-53ef-a9a4-d121eb896a0e"},"next":{"fields":{"slug":"/posts/spring-batch/"},"frontmatter":{"title":"Spring Batch"}},"previous":{"fields":{"slug":"/posts/tdd-sample-project/"},"frontmatter":{"title":"TDD SAMPLE PROJECT"}}},{"node":{"id":"7b317632-317d-580c-bfa6-c53f96edeb52"},"next":{"fields":{"slug":"/posts/react-project-개발기/"},"frontmatter":{"title":"React Project 개발기"}},"previous":{"fields":{"slug":"/posts/e-tas-server-to-server-연동-batch/"},"frontmatter":{"title":"eTAS Server to Server 연동 Batch"}}},{"node":{"id":"e29c2d7f-1fd2-5913-a904-11996c231f54"},"next":{"fields":{"slug":"/posts/hadoop/"},"frontmatter":{"title":"Hadoop"}},"previous":{"fields":{"slug":"/posts/spring-batch/"},"frontmatter":{"title":"Spring Batch"}}},{"node":{"id":"7f695fca-e5ce-5c55-970b-e8855f99b61a"},"next":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}},"previous":{"fields":{"slug":"/posts/react-project-개발기/"},"frontmatter":{"title":"React Project 개발기"}}},{"node":{"id":"9f46ad6e-455d-53e9-8d4c-4794e5af39dd"},"next":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}},"previous":{"fields":{"slug":"/posts/hadoop/"},"frontmatter":{"title":"Hadoop"}}},{"node":{"id":"7470f1ce-f71d-5772-a8be-806ed3f7cc66"},"next":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}},"previous":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}}},{"node":{"id":"27ea8f29-94a3-5302-a637-efd0af842208"},"next":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}},"previous":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}}},{"node":{"id":"c54308e0-d7a2-5d1c-b8ae-ecbfd04ed1ac"},"next":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}},"previous":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}}},{"node":{"id":"c8b65dec-7fef-5ef0-a515-27ae182dff3e"},"next":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}},"previous":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}}},{"node":{"id":"6814abc2-41a1-520c-bd24-a8d2d02424fb"},"next":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}},"previous":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}}},{"node":{"id":"2fa87adf-6f94-54db-a8e4-7ab4990ba5e6"},"next":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}},"previous":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}}},{"node":{"id":"2311c1d2-b785-582e-a9a9-d80750b5d505"},"next":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}},"previous":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}}},{"node":{"id":"54319bda-39af-5fa4-9eee-7f84ee580c1a"},"next":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}},"previous":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}}},{"node":{"id":"443ae298-350d-531c-a42c-34e0acb0cdd8"},"next":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}},"previous":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}}},{"node":{"id":"2e8c37a8-a44a-5356-b617-dc7b22034c2a"},"next":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}},"previous":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}}},{"node":{"id":"64980158-2ad8-5c44-91a8-a0185a6d4f6b"},"next":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}},"previous":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}}},{"node":{"id":"5128821c-b701-5848-9979-bb91ec9c5836"},"next":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}},"previous":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}}},{"node":{"id":"d4549afd-0095-5810-b492-b843ca6e2f88"},"next":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}}},{"node":{"id":"e46642ac-6d65-51b8-a535-21a9e3eabb56"},"next":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}}},{"node":{"id":"46426481-29ee-5d00-aa6c-cf05d52490f6"},"next":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}},"previous":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}}},{"node":{"id":"6eed9dfa-e294-5b19-a225-cd43d6cb982a"},"next":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}},"previous":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}}},{"node":{"id":"f77c8cbf-3a58-53fc-bd32-592702676a11"},"next":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}},"previous":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}}},{"node":{"id":"f016fc75-8476-5493-8ac1-e2862773f3e7"},"next":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}},"previous":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}}},{"node":{"id":"9f5a9a91-7af6-5ca3-b20f-d6e177e46c68"},"next":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}},"previous":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}}},{"node":{"id":"b4e07799-70a4-523d-90ec-741e18230194"},"next":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}},"previous":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}}},{"node":{"id":"571df319-d1dd-59b6-a588-7a5db12c6b3d"},"next":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}},"previous":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}}},{"node":{"id":"ef05bf06-2d53-5323-820b-98f46a906289"},"next":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}},"previous":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}}},{"node":{"id":"a78eb59a-78b3-5c86-bcc2-f09ea58fab23"},"next":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}},"previous":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}}},{"node":{"id":"3c37f3d1-7097-5528-a31b-12bcdcd937ab"},"next":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}},"previous":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}}},{"node":{"id":"fe690dd1-ec0c-544b-a44f-131d80987565"},"next":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}},"previous":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}}},{"node":{"id":"b8c8c26f-09bc-5759-8a7e-c81ffbc8f2c0"},"next":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}},"previous":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}}},{"node":{"id":"6268f141-e6af-5f89-a55b-2174ef57651f"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}}},{"node":{"id":"1a663d51-139e-500f-a209-04faaebd2e85"},"next":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}},"previous":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}}},{"node":{"id":"b227a2c1-7853-5450-a1be-f3e1c83307b4"},"next":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"80979747-a7b7-5e5d-81bb-30729e2e16bd"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}}},{"node":{"id":"a82c048c-1eea-54e3-912d-ae875640e04e"},"next":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}},"previous":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}}},{"node":{"id":"18c2a54b-1a71-511c-824c-f437be00f3ef"},"next":{"fields":{"slug":"/posts/tomcat-사용법/"},"frontmatter":{"title":"Tomcat 사용법"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"d2056881-058f-5f23-88ec-cf613dff77f0"},"next":{"fields":{"slug":"/posts/web-rtc/"},"frontmatter":{"title":"WebRTC"}},"previous":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}}},{"node":{"id":"d54a4c19-013d-538a-893d-ff8f62d34d7a"},"next":null,"previous":{"fields":{"slug":"/posts/tomcat-사용법/"},"frontmatter":{"title":"Tomcat 사용법"}}}]}},"pageContext":{"id":"27ea8f29-94a3-5302-a637-efd0af842208"}},"staticQueryHashes":["2001315320"]}