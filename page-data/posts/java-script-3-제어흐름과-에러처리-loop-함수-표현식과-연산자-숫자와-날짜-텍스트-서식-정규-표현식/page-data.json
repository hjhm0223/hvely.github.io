{"componentChunkName":"component---src-templates-single-post-js","path":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/","result":{"data":{"post":{"frontmatter":{"meta":{"title":"test meta title","description":"test meta description","noindex":null,"canonicalLink":null},"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식","template":"SinglePost","subtitle":null,"date":"July 29th, 2021","categories":[{"category":"JavaScript"}]},"html":"<p><img src=\"https://gawoori.net/wp-content/uploads/2018/04/javascript-frameworks.jpg\" alt=\"javascript\"></p>\n<h1>JavaScript (3) - 제어흐름과 에러처리</h1>\n<p>​\tJavaScript는 어플리케이션 상의 상호작용을 통합하는데 사용할 수 있는 일련의 문법, 특히 제어흐름 문을 지원한다.  </p>\n<h3>Block 문</h3>\n<ul>\n<li>\n<p>Block 문은 코드를 묶는 가장 기본적인 문법이다. Block 문은 중괄호 ( <code>{ }</code> )에 의해 범위가 결정된다.</p>\n<pre><code class=\"language-javascript\">{\nstatement_1;\nstatement_2;\n.\n.\n.\nstatement_n;\n}\n</code></pre>\n</li>\n<li>\n<p>Block 문은 일반적으로 제어 흐름 문(if, for, while)과 함께 사용된다.</p>\n<pre><code class=\"language-javascript\">// 여기서 `{ x++; }`는 block 문\nwhile (x &#x3C; 10) {\nx++;\n}\n</code></pre>\n<blockquote>\n<p><strong>중요</strong>: ECMAScript2015 이전의 JavaScript는 <strong>블록 범위를 가지고 있지 않다.</strong> Block 내에서 선언한 변수는 블록을 넘어 변수가 위치한 함수 혹은 스크립트에 영향을 끼치게 된다.즉, block 문은 변수의 범위를 정의하지 않는다. 자바스크립트의 \"독립\" block 은 C 혹은 Java의 그것과 완전히 다른 결과를 가진다.</p>\n<pre><code class=\"language-javascript\">var x = 1;\n{\nvar x = 2;\n}\nconsole.log(x); // outputs 2\n</code></pre>\n<p>C나 Java에서 해당 코드는 1을 출력한다.</p>\n<p>ECMAScript2015부터, <code>let</code> 그리고 <code>const</code> 변수 선언으로 변수의 블록 범위를 제한할 수 있다.</p>\n</blockquote>\n</li>\n</ul>\n<h3>조건문</h3>\n<ul>\n<li>조건문은 특정 조건이 참인 경우에 실행하는 명령의 집합이다. </li>\n<li>\n<p>JavaScript는 두 가지 조건문을 지원한다</p>\n<ol>\n<li><code>if...else</code>문</li>\n<li>조건문 안에서의 변수값 할당은 동등비교연산자로 오해할 수 있기 때문에 사용하지 않는 것이 좋다. </li>\n<li>\n<p>거짓으로 취급하는 값</p>\n<ul>\n<li><code>false</code>, <code>undefined</code>, <code>null</code>, <code>0</code>, <code>NaN</code>, the empty string (<code>\"\"</code>)</li>\n</ul>\n</li>\n<li><code>switch</code>문</li>\n</ol>\n</li>\n</ul>\n<h3>예외처리문</h3>\n<ol>\n<li>\n<p><code>throw</code>문</p>\n<ul>\n<li>예외를 사용할 때 사용되는 값을 표함하는 표현을 명시해야 한다.</li>\n</ul>\n<pre><code class=\"language-javascript\">throw \"Error2\";   // String type\nthrow 42;         // Number type\nthrow true;       // Boolean type\nthrow {toString: function() { return \"I'm an object!\"; } };\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> <em>예외를 사용할때</em> 객체를 명시할 수 있다. 그리고나서  <code>catch</code> 문 안에서 객체의 특성들을 참조 할 수 있다. 다음 예시는 <code>myUserException</code> of type <code>UserException</code>객체를 만들고 throw문에서 사용한다.</p>\n<pre><code class=\"language-javascript\">// Create an object type UserException\nfunction UserException (message){\nthis.message=message;\nthis.name=\"UserException\";\n}\n\n// Make the exception convert to a pretty string when used as a string\n// (e.g. by the error console)\nUserException.prototype.toString = function () {\nreturn this.name + ': \"' + this.message + '\"';\n}\n\n// Create an instance of the object type and throw it\nthrow new UserException(\"Value too high\");\n</code></pre>\n</blockquote>\n</li>\n<li>\n<p><code>try...catch</code>문</p>\n<ul>\n<li><code>try...catch</code> 문법은 시도할 블록을 표시하고, 예외가 발생하였을 때 하나 이상의 반응을 명시한다. 만약 예외가 발생하였을때, <code>try...catch</code> 문법은 예외를 잡아낸다.</li>\n<li><code>try</code> 블록이 성공하지 않았다면, 제어는 즉시 <code>catch</code> 블록으로 이동한다. 만약 <code>try</code> 블록에서 예외가 발생하지 않았을 때, <code>catch</code> 블록을 건너뛴다.</li>\n<li>예시: 함수에 전해진 값을 토대로 달의 이름을 검색하는 함수를 호출한다. 만약 값이 달 숫자값(1-12) 에 일치하지 않으면,<code>\"InvalidMonthNo\"</code> 라는 값과 함께 예외가 발생하고 <code>catch</code> 블록의 문장들이 <code>monthName</code> 변수를 <code>unknown</code> 값으로 설정한다.</li>\n</ul>\n<pre><code class=\"language-javascript\">function getMonthName (mo) {\n  mo = mo-1; // Adjust month number for array index (1=Jan, 12=Dec)\n  var months = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\n                \"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n  if (months[mo] != null) {\n    return months[mo];\n  } else {\n    throw \"InvalidMonthNo\"; //throw keyword is used here\n  }\n}\n\ntry { // statements to try\n  monthName = getMonthName(myMonth); // function could throw exception\n}\ncatch (e) {\n  monthName = \"unknown\";\n  logMyErrors(e); // pass exception object to error handler\n}\n</code></pre>\n<ul>\n<li><code>catch</code> 블록</li>\n<li><code>catch</code> 블록은 <code>throw</code>문장에 의해 명시된 값을 가지고 있는 식별자(앞 구문의 <code>catchID</code>)를 명시한다. 이 식별자를 발생된 예외에 대한 정보를 얻기 위하여 사용할 수 있다. JavaScript는 <code>catch</code> 블록에 진입했을때 식별자를 생성한다. 식별자는 <code>catch</code> 블록에 있는 동안만 유지된다. <code>catch</code> 블록의 시행이 끝난 후, 식별자는 더이상 사용할 수 없다.</li>\n<li><code>finally</code> 블록</li>\n<li><code>finally</code> 블록은 <code>try</code> 블록과 <code>catch</code> 블록이 시행되고, <code>try...catch</code> 문법 다음 문장이 시행되기 전에 시행되는 문장들을 포함하고 있다.</li>\n<li><code>finally</code> 블록은 예외가 발생하든 안하든 수행된다.</li>\n<li><code>finally</code> 블록을 예외가 발생하였을때 스크립트가 우아하게 실패하도록 만들기 위하여 사용할 수 있다. </li>\n<li>\n<p>예시: 파일을 열고, 파일을 사용하는 문장(서버 측 자바스크립트는 파일에 접근하는 것을 허가합니다)을 시행할 때, 만약 파일이 열린 동안 예외가 발생했다면, <code>finally</code> 블록은 스크립트가 실패하기 전에 파일을 닫아준다.</p>\n<pre><code class=\"language-javascript\">openMyFile();\ntry {\n writeMyFile(theData); //This may throw a error\n} catch(e) {\n handleError(e); // If we got a error we handle it\n} finally {\n closeMyFile(); // always close the resource\n}\n</code></pre>\n</li>\n<li>try...catch 문법 중첩하기</li>\n<li>중첩된 안쪽 <code>try ... catch</code> 문에 <code>catch</code> 블록이 없으면 <code>finally</code> 블록이 있어야하고 <code>try ... catch</code> 문의 <code>catch</code> 블록에 일치하는 항목이 있는지 확인해야한다.</li>\n</ul>\n</li>\n</ol>\n<h4>예외 유형</h4>\n<ul>\n<li>\n<p>대부분 자바스크립트안에서 사용될 수 있음에도 불구하고, 반드시 사용되는 객체들이 같은 것으로 만들어 지지는 않는다. 이것들은 에러같은 숫자들이나 문자열들을 사용하는데 흔한 일이지만 특히 이런 목적으로 만들어진 예외 유형중 하나를 사용하는데 더 효과적이다.</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects#fundamental_objects\">ECMAScript exceptions</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMException\"><code>DOMException</code> (en-US)</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMError\"><code>DOMError</code> (en-US)</a></li>\n</ul>\n</li>\n</ul>\n<h3>Error 객체를 도구화하기</h3>\n<ul>\n<li>\n<p>오류의 종류에 따라 더 정제된 메세지를 얻기 위하여 'name'속성과 'message'속성을 사용할 수 있다. </p>\n<ul>\n<li>'name' 속성</li>\n</ul>\n<p>오류의 일반 클래스(e.g., 'DOMException' 또는 'Error')를 제공</p>\n<ul>\n<li>'message' 속성</li>\n</ul>\n<p>error 객체를 문자열로 바꿀수 있는 것보다 더 간결한 메세지를 제공</p>\n<pre><code class=\"language-javascript\">function doSomethingErrorProne () {\nif (ourCodeMakesAMistake()) {\n  throw (new Error('The message'));\n} else {\n  doSomethingToGetAJavascriptError();\n}\n}\n\ntry {\ndoSomethingErrorProne();\n}\ncatch (e) {\nconsole.log(e.name); // logs 'Error'\nconsole.log(e.message); // logs 'The message' or a JavaScript error message)\n}\n</code></pre>\n</li>\n</ul>\n<h3>Promises</h3>\n<p>​\tECMAScript2015를 시작하면서, JavaScript는 지연된 흐름과 비동기식의 연산을 제어할 수 있게 하는 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> 객체에 대한 지원을 얻게 되었다.</p>\n<ul>\n<li>\n<p><code>Promise</code> 상태 종류</p>\n<ol>\n<li><em>pending</em></li>\n</ol>\n<p> 초기상태, fulfilled 되거나 rejected 되지 않음.</p>\n<ol start=\"2\">\n<li><em>fulfilled</em></li>\n</ol>\n<p> 연산 수행 성공.</p>\n<ol start=\"3\">\n<li><em>rejected</em></li>\n</ol>\n<p> 연산 수행 실패.</p>\n<ol start=\"4\">\n<li><em>settled</em></li>\n</ol>\n<p> Promise 가 fulfilled 이거나 rejected 이지만 pending 은 아님.</p>\n</li>\n</ul>\n<p><img src=\"https://mdn.mozillademos.org/files/8633/promises.png\" alt=\"promises\"></p>\n<ul>\n<li>\n<p>예시: XHR를 통해 이미지 불러오기</p>\n<pre><code class=\"language-javascript\">function imgLoad(url) {\nreturn new Promise(function(resolve, reject) {\n  var request = new XMLHttpRequest();\n  request.open('GET', url);\n  request.responseType = 'blob';\n  request.onload = function() {\n    if (request.status === 200) {\n      resolve(request.response);\n    } else {\n      reject(Error('Image didn\\'t load successfully; error code:'\n                   + request.statusText));\n    }\n  };\n  request.onerror = function() {\n    reject(Error('There was a network error.'));\n  };\n  request.send();\n});\n}\n</code></pre>\n<blockquote>\n<p> <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> 참고 페이지</p>\n</blockquote>\n</li>\n</ul>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide\">MDN - JavaScript 안내서</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference\">MDN - JavaScript 참고서</a></li>\n</ul>","id":"7470f1ce-f71d-5772-a8be-806ed3f7cc66"},"allPosts":{"edges":[{"node":{"id":"7f695fca-e5ce-5c55-970b-e8855f99b61a"},"next":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}},"previous":null},{"node":{"id":"9f46ad6e-455d-53e9-8d4c-4794e5af39dd"},"next":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}},"previous":{"fields":{"slug":"/posts/hadoop/"},"frontmatter":{"title":"Hadoop"}}},{"node":{"id":"27ea8f29-94a3-5302-a637-efd0af842208"},"next":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}},"previous":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}}},{"node":{"id":"7470f1ce-f71d-5772-a8be-806ed3f7cc66"},"next":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}},"previous":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}}},{"node":{"id":"c54308e0-d7a2-5d1c-b8ae-ecbfd04ed1ac"},"next":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}},"previous":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}}},{"node":{"id":"c8b65dec-7fef-5ef0-a515-27ae182dff3e"},"next":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}},"previous":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}}},{"node":{"id":"6814abc2-41a1-520c-bd24-a8d2d02424fb"},"next":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}},"previous":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}}},{"node":{"id":"2fa87adf-6f94-54db-a8e4-7ab4990ba5e6"},"next":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}},"previous":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}}},{"node":{"id":"54319bda-39af-5fa4-9eee-7f84ee580c1a"},"next":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}},"previous":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}}},{"node":{"id":"2311c1d2-b785-582e-a9a9-d80750b5d505"},"next":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}},"previous":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}}},{"node":{"id":"2e8c37a8-a44a-5356-b617-dc7b22034c2a"},"next":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}},"previous":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}}},{"node":{"id":"443ae298-350d-531c-a42c-34e0acb0cdd8"},"next":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}},"previous":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}}},{"node":{"id":"64980158-2ad8-5c44-91a8-a0185a6d4f6b"},"next":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}},"previous":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}}},{"node":{"id":"5128821c-b701-5848-9979-bb91ec9c5836"},"next":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}},"previous":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}}},{"node":{"id":"d4549afd-0095-5810-b492-b843ca6e2f88"},"next":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}}},{"node":{"id":"46426481-29ee-5d00-aa6c-cf05d52490f6"},"next":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}}},{"node":{"id":"6eed9dfa-e294-5b19-a225-cd43d6cb982a"},"next":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}},"previous":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}}},{"node":{"id":"e46642ac-6d65-51b8-a535-21a9e3eabb56"},"next":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}},"previous":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}}},{"node":{"id":"f77c8cbf-3a58-53fc-bd32-592702676a11"},"next":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}},"previous":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}}},{"node":{"id":"f016fc75-8476-5493-8ac1-e2862773f3e7"},"next":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}},"previous":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}}},{"node":{"id":"9f5a9a91-7af6-5ca3-b20f-d6e177e46c68"},"next":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}},"previous":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}}},{"node":{"id":"b4e07799-70a4-523d-90ec-741e18230194"},"next":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}},"previous":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}}},{"node":{"id":"ef05bf06-2d53-5323-820b-98f46a906289"},"next":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}},"previous":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}}},{"node":{"id":"571df319-d1dd-59b6-a588-7a5db12c6b3d"},"next":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}},"previous":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}}},{"node":{"id":"a78eb59a-78b3-5c86-bcc2-f09ea58fab23"},"next":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}},"previous":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}}},{"node":{"id":"3c37f3d1-7097-5528-a31b-12bcdcd937ab"},"next":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}},"previous":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}}},{"node":{"id":"fe690dd1-ec0c-544b-a44f-131d80987565"},"next":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}},"previous":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}}},{"node":{"id":"6268f141-e6af-5f89-a55b-2174ef57651f"},"next":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}},"previous":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}}},{"node":{"id":"b8c8c26f-09bc-5759-8a7e-c81ffbc8f2c0"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}}},{"node":{"id":"1a663d51-139e-500f-a209-04faaebd2e85"},"next":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}},"previous":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}}},{"node":{"id":"b227a2c1-7853-5450-a1be-f3e1c83307b4"},"next":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"80979747-a7b7-5e5d-81bb-30729e2e16bd"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}}},{"node":{"id":"a82c048c-1eea-54e3-912d-ae875640e04e"},"next":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}},"previous":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}}},{"node":{"id":"18c2a54b-1a71-511c-824c-f437be00f3ef"},"next":{"fields":{"slug":"/posts/web-rtc/"},"frontmatter":{"title":"WebRTC"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"d54a4c19-013d-538a-893d-ff8f62d34d7a"},"next":{"fields":{"slug":"/posts/tomcat-사용법/"},"frontmatter":{"title":"Tomcat 사용법"}},"previous":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}}},{"node":{"id":"d2056881-058f-5f23-88ec-cf613dff77f0"},"next":null,"previous":{"fields":{"slug":"/posts/web-rtc/"},"frontmatter":{"title":"WebRTC"}}}]}},"pageContext":{"id":"7470f1ce-f71d-5772-a8be-806ed3f7cc66"}},"staticQueryHashes":["2001315320"]}