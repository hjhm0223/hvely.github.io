{"componentChunkName":"component---src-templates-single-post-js","path":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/","result":{"data":{"post":{"frontmatter":{"meta":{"title":"test meta title","description":"test meta description","noindex":null,"canonicalLink":null},"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식","template":"SinglePost","subtitle":null,"date":"July 29th, 2021","categories":[{"category":"JavaScript"}]},"html":"<p><img src=\"https://gawoori.net/wp-content/uploads/2018/04/javascript-frameworks.jpg\" alt=\"javascript\"></p>\n<h1>JavaScript (4) - Loop와 반복</h1>\n<h3>1. <code>for</code> / <code>for .. in</code> / <code>for .. of</code> 문</h3>\n<ul>\n<li>\n<p><code>for .. in</code> 문</p>\n<p>객체의 열거 속성을 통해 지정된 변수를 반복한다.</p>\n</li>\n<li>\n<p><code>for .. of</code> 문</p>\n<p>반복 가능한 객체를 통해 반복하는 루프를 만든다.</p>\n</li>\n<li>\n<p>차이</p>\n<pre><code class=\"language-javascript\">let arr = [3, 5, 7];\narr.foo = \"hello\";\n\nfor (let i in arr) {\n console.log(i); // logs \"0\", \"1\", \"2\", \"foo\"\n}\n\nfor (let i of arr) {\n console.log(i); // logs \"3\", \"5\", \"7\"\n}\n</code></pre>\n</li>\n</ul>\n<h3>2. <code>do .. while</code> / <code>while</code> 문</h3>\n<ul>\n<li>조건이 거짓으로 판별될 때까지 반복한다.</li>\n<li>\n<p><code>do .. while</code> 문</p>\n<pre><code class=\"language-javascript\">do {\nstatement\n} while (조건문);\n</code></pre>\n</li>\n<li><code>while</code> 문</li>\n</ul>\n<h3>3. <code>label</code> 문</h3>\n<ul>\n<li>\n<p>다른 곳으로 참조할 수 있도록 식별자로 제공한다.</p>\n<pre><code class=\"language-javascript\">label:\n    statement\n</code></pre>\n</li>\n</ul>\n<h3>4. <code>break</code> / <code>continue</code> 문</h3>\n<ul>\n<li>\n<p><code>break</code> 문</p>\n<p><code>switch</code> 문, <code>label</code> 문과 결합한 문장을 빠져나올 때 사용한다.</p>\n<ul>\n<li>레이블 없이 break문을 쓸 때 <code>break;</code></li>\n</ul>\n<p><code>가장 가까운</code>while<code>,</code>do-while<code>,</code>for<code>, 또는</code>switch`문을 종료하고 다음 명령어로 넘어간다.</p>\n<ul>\n<li>레이블 문을 쓸 때 <code>break [레이블];</code></li>\n</ul>\n<p>특정 레이블 문에서 끝난다. </p>\n</li>\n<li>\n<p><code>continue</code> 문</p>\n<p>while, do-while, for, 레이블 문을 다시 시작하기 위해 사용될 수 있다.</p>\n<ul>\n<li>레이블 없이 continue를 사용하는 경우 <code>continue;</code></li>\n</ul>\n<p>가장 안쪽의 while, do-while, for 문을 둘러싼 현재 반복을 종료하고, 다음 반복으로 루프의 실행을 계속한다.  </p>\n<p>break문과 달리, continue 문은 전체 루프의 실행을 종료하지 않는다. </p>\n<p>while 루프에서는 다시 조건으로 이동하고, for 루프에서는 증감 표현으로 이동한다.     </p>\n<ul>\n<li>레이블과 함께 continue를 사용하는 경우 <code>continue [레이블];</code></li>\n</ul>\n<p>continue는 그 레이블로 식별되는 루프 문에 적용된다.</p>\n</li>\n</ul>\n<h1>JavaScript (4) - 함수</h1>\n<ul>\n<li>\n<p>default parameter</p>\n<pre><code class=\"language-javascript\">// default parameter를 지정하면 undefined인지 검사할 필요가 없다.\nfunction multiply(a, b = 1) {\nreturn a*b;\n}\n</code></pre>\n</li>\n<li>\n<p>나머지 매개변수</p>\n<pre><code class=\"language-javascript\">function multiply(multiplier, ...theArgs) {\nreturn theArgs.map(x => multiplier * x);\n}\n\nvar arr = multiply(2, 1, 2, 3);\nconsole.log(arr); // [2, 4, 6]\n</code></pre>\n</li>\n</ul>\n<h3>화살표 (fat arrow) 함수</h3>\n<ul>\n<li><code>=></code>를 사용하여 나타낸다.</li>\n<li>\n<p>비교적 짧은 문법을 가지고 있고 사전적으로  this 값을 묶는다.</p>\n<pre><code class=\"language-javascript\">var a = [\n\"Hydrogen\",\n\"Helium\",\n\"Lithium\",\n\"Beryl­lium\"\n];\n\nvar a2 = a.map(function(s){ return s.length });\nconsole.log(a2); // logs [8, 6, 7, 9]\n\nvar a3 = a.map( s => s.length );\nconsole.log(a3); // logs [8, 6, 7, 9]\n</code></pre>\n</li>\n</ul>\n<h3>사전적 <code>this</code></h3>\n<ul>\n<li>화살표 함수에서 모든 new 함수들은 그들의 this 값을 정의한다.</li>\n<li>생성자로서 새로운 객체, 정의되지 않은 strict mode의 함수 호출 등은 객체지향 프로그래밍 스타일이 아니다.</li>\n<li>\n<p>IECMAScript 3/5 에서 <code>this</code> 안의 값을 수정할 수 있는 변수에 할당하는 것으로 고쳐졌다.</p>\n<pre><code class=\"language-javascript\">function Person() {\nvar self = this; // Some choose `that` instead of `self`.\n                 // Choose one and be consistent.\nself.age = 0;\n\nsetInterval(function growUp() {\n  // The callback refers to the `self` variable of which\n  // the value is the expected object.\n  self.age++;\n}, 1000);\n}\n</code></pre>\n</li>\n<li>\n<p>화살표 함수에는 <code>this</code>가 없다.</p>\n<pre><code class=\"language-javascript\">function Person() {\nthis.age = 0;\n\nsetInterval(() => {\n  this.age++; // |this| properly refers to the person object\n}, 1000);\n}\n\nvar p = new Person();\n</code></pre>\n</li>\n</ul>\n<h3>JavaScript 내장함수</h3>\n<ol>\n<li>\n<p><code>eval()</code></p>\n<p><code>eval()</code> 메소드는 문자열로 표현된 자바스크립트 코드를 수행한다.</p>\n</li>\n<li>\n<p><code>uneval()</code></p>\n<p><code>uneval()</code> 메소드는 <code>Object</code>의 소스코드를 표현하는 문자열을 만든다.</p>\n</li>\n<li>\n<p><code>isFinite()</code></p>\n<p>전역 <code>isFinite()</code> 함수는 전달받은 값이 유한한지 결정한다. 만약 필요하다면, 매개변수는 첫번째로 숫자로 변환된다.</p>\n</li>\n<li>\n<p><code>isNaN()</code></p>\n<p><code>isNaN()</code> 함수는 <code>NaN</code>인지 아닌지 결정한다. </p>\n<blockquote>\n<p>Note: <code>isNaN</code> 함수 안의 강제 변환은 흥미로운 규칙을 가지고 있다. <code>Number.isNaN()</code>을 대신 사용하고 싶을것이다. ECMAScript 6 에서 정의된, 또는 값이 숫자값이 아닐 때, <code>typeof</code> 를 사용할 수도 있다 .</p>\n</blockquote>\n</li>\n<li>\n<p><code>parseFloat()</code></p>\n<p><code>parseFloat()</code> 함수는 문자열 인수 값을 해석하여 부동소숫점 수를 반환한다.</p>\n</li>\n<li>\n<p><code>parseInt()</code></p>\n<p><code>parseInt()</code> 함수는 문자열 인수 값을 해석하여 특정한 진법의 정수를 반환한다.</p>\n</li>\n<li>\n<p><code>decodeURI()</code></p>\n<p><code>decodeURI()</code> 함수는 사전에 <code>encodeURI</code>을 통해 만들어지거나 비슷한 과정을 통해 만들어진 URI(Uniform Resource Identifier) 를 해독한다.</p>\n</li>\n<li>\n<p><code>decodeURIComponent()</code></p>\n<p><code>decodeURIComponent()</code> 메소드는 사전에 <code>encodeURIComponent</code>를 통하여 만들어 지거나 또는 비슷한 과정을 통해 만들어진 URI (Uniform Resource Identifier) 컴포넌트를 해독한다.</p>\n</li>\n<li>\n<p><code>encodeURI()</code></p>\n<p><code>encodeURI()</code> 메소드는 URI(Uniform Resource Identifier)를 각 인스턴스의 특정한 문자를 한개, 두개,세개, 또는 네개의 UTF-8인코딩으로 나타내어지는 연속된 확장문자들과 바꾸는 방법으로 부호화한다. (두 \"surrogate\" 문자로 구성된 문자들은 오직 네개의 연속된 확장문자다.)</p>\n</li>\n<li>\n<p><code>encodeURIComponent()</code></p>\n<p><code>encodeURIComponent()</code> 메소드는 URI(Uniform Resource Identifier) 컴포넌트를 각 인스턴스의 특정한 문자를 한개, 두개, 세개, 또는 네개의 UTF-8인코딩으로 나타내어지는 연속된 확장문자들과 바꾸는 방법으로 부호화한다. (두 \"surrogate\" 문자로 구성된 문자들은 오직 네개의 연속된 확장문자다.)</p>\n</li>\n<li>\n<p><code>escape()</code> (en-US)</p>\n<p>곧 사라질 <code>escape()</code> 메소드는 한 문자열에서 특정 문자들이 16진 확장 비트열로 바뀌어진 문자열로 계산한다. <code>encodeURI</code> 또는 <code>encodeURIComponent</code> 를 사용하는 것이 좋다.</p>\n</li>\n<li>\n<p><code>unescape()</code> (en-US)</p>\n<p>곧 사라질 <code>unescape()</code> 메소드는 문자열에서 확장 비트열이 확장 비트열이 나타내는 문자로 바뀌어진 문자열로 계산한다. <code>escape</code> (en-US)에서 확장 비트열이 소개될 것이다. <code>unescape()</code> 메소드가 곧 사라지기 때문에, <code>decodeURI()</code> or <code>decodeURIComponent</code>를 대신 사용하는 것이 좋다.</p>\n</li>\n</ol>\n<h1>JavaScript (4) - 표현식과 연산자</h1>\n<h3>연산자</h3>\n<ol>\n<li>할당 연산자</li>\n<li>비교 연산자</li>\n<li>산술 연산자</li>\n<li>비트 연산자</li>\n<li>논리 연산자</li>\n<li>문자열 연산자</li>\n<li>\n<p>조건 (삼항) 연산자</p>\n<pre><code class=\"language-javascript\">condition ? val1 : val2\n</code></pre>\n</li>\n<li>쉼표 연산자</li>\n<li>\n<p>단항 연산자</p>\n<ul>\n<li><code>delete</code> 연산자</li>\n</ul>\n<p> 객체의 속성을 삭제한다.</p>\n<pre><code class=\"language-javascript\">delete object.property;\ndelete object[propertyKey];\ndelete objectName[index];\n</code></pre>\n<blockquote>\n<p>배열의 원소를 삭제하는 경우에는 <code>undefined</code>로 덮어쓰거나 <code>splice</code>와 같은 다양한 배열 메서드를 사용하는 것이 좋다.</p>\n</blockquote>\n<ul>\n<li><code>type of</code> 연산자</li>\n</ul>\n<p> 평가 전의 피연산자 타입을 나타내는 문자열을 반환한다.</p>\n<pre><code class=\"language-javascript\">typeof true; // \"boolean\" 반환\ntypeof null; // \"object\" 반환\n</code></pre>\n<ul>\n<li><code>void</code> 연산자</li>\n</ul>\n<p> 표현식을 평가할 때 값을 반환하지 않도록 지정한다. </p>\n<pre><code class=\"language-javascript\">void expression\n</code></pre>\n</li>\n<li>\n<p>관계 연산자</p>\n<ul>\n<li>\n<p><code>in</code> 연산자</p>\n<p>지정한 속성이 지정한 객체에 존재할 경우 <code>true</code>를 반환한다.</p>\n<pre><code class=\"language-javascript\">propNameOrNumber in objectName\n</code></pre>\n</li>\n<li>\n<p><code>instanceof</code> 연산자</p>\n<p>지정한 객체가 지정한 객체 타입에 속하면 <code>true</code>를 반환한다.</p>\n<pre><code class=\"language-javascript\">objectName instanceof objectType\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h3>표현식</h3>\n<ol>\n<li>\n<p>일차 표현식</p>\n<p>JavaScript의 키워드와 일반 표현식이다.</p>\n<ul>\n<li><code>this</code> 키워드</li>\n</ul>\n<p> 현재 객체를 참조할 때 사용한다.</p>\n</li>\n<li>\n<p>좌변 표현식</p>\n<ul>\n<li><code>new</code> 연산자</li>\n</ul>\n<p> 사용자 정의 객체 타입이나 내장 객체 타입의 인스턴스를 생성할 수 있다.</p>\n<ul>\n<li><code>super</code> 키워드</li>\n</ul>\n<p> 객체의 부모가 가진 함수를 호출할 때 사용한다.</p>\n</li>\n</ol>\n<h1>JavaScript (4) - 숫자와 날짜</h1>\n<h3><code>Date</code> 객체</h3>\n<ul>\n<li>자바스크립트에는 날짜 데이터 타입이 없지만 <code>Date</code> 객체와 그 메소드를 사용하여 응용 프로그램에서 날짜와 시간을 처리 할 수 있다.</li>\n<li><code>Date</code> 객체에는 날짜 설정, 가져 오기 및 조작을위한 많은 메소드가 있으나 속성(properties)은 없다.</li>\n<li>자바스크립트는 자바와 비슷하게 날짜를 처리한다. 두 언어에는 동일한 날짜 메소드가 많으며 두 언어 모두 1970 년 1 월 1 일 00:00:00 이후의 밀리 초 수로 날짜를 저장한다. 유닉스 타임 스탬프는 1970 년 1 월 1 일 00:00:00 이후의 초 수다.</li>\n<li>\n<p>Date 개체 범위는 UTC 1970 년 1 월 1 일을 기준으로 -100,000,000 일에서 100,000,000 일이다.</p>\n<pre><code class=\"language-javascript\">var dateObjectName = new Date([parameters]);\n\n// 오늘의 날짜와 시간\nnew Date();\n\n// 날짜를 나타내는 문자열의 형식 (\"Month day, year hours:minutes:seconds\", 시간은 생략 가능)\nnew Date(\"December 25, 1995 13:30:00\");\n\n// 정수 값의 (연도, 월, 날)\nnew Date(1995, 11, 25);\n\n// (연도, 월, 일, 시, 분, 초)\nnew Date(1995, 11, 25, 9, 30, 0);\n</code></pre>\n</li>\n<li>\n<p>Date 개체의 표현 방법</p>\n<ul>\n<li>\"set\" 함수</li>\n</ul>\n<p>날짜 및 시간 값을 설정한다.</p>\n<ul>\n<li>\"get\" 함수</li>\n</ul>\n<p>날짜 및 시간 값을 얻는다.</p>\n<ul>\n<li>\"to\" 함수</li>\n</ul>\n<p>문자열 값을 반환한다.</p>\n<ul>\n<li><code>Date</code> 문자열을 분석하기위해 parse와 UTC함수를 사용한다.</li>\n</ul>\n<pre><code class=\"language-javascript\">var IPOdate = new Date();\nIPOdate.setTime(Date.parse(\"Aug 9, 1995\"));\n</code></pre>\n<ul>\n<li>\"get\"및 \"set\"메소드를 사용하여 초, 분,시, 일, 요일, 월 및 연도를 별도로 가져 와서 설정할 수 있다. (요일이 자동적으로 설정되기 (위해) 때문에, 요일을 돌려주는 getDay 메소드가 있습니다만, 대응하는 setDay 메소드는 없다.) </li>\n<li>초와 분: 0 to 59</li>\n<li>시간: 0 to 23</li>\n<li>요일: 0 (Sunday) to 6 (Saturday)</li>\n<li>날짜: 1 to 31 (day of the month)</li>\n<li>월: 0 (January) to 11 (December)</li>\n<li>연도: years since 1900</li>\n</ul>\n<pre><code class=\"language-javascript\">var Xmas95 = new Date(\"December 25, 1995\");\nconsole.log(Xmas95.getMonth()); // 11\nconsole.log(Xmas95.getFullYear()); // 1995\n</code></pre>\n</li>\n</ul>\n<h1>JavaScript (4) - 텍스트 서식</h1>\n<h3>문자열 메서드</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Method</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\"><code>charAt</code></a>, <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\"><code>charCodeAt</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\"><code>codePointAt</code> (en-US)</a></td>\n<td align=\"left\">문자열에서 지정된 위치에 있는 문자나 문자 코드를 반환합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\"><code>indexOf</code></a>, <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\"><code>lastIndexOf</code></a></td>\n<td align=\"left\">문자열에서 지정된 부분 문자열의 위치나 지정된 부분 문자열의 마지막 위치를 각각 반환합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\"><code>startsWith</code></a>, <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\"><code>endsWith</code></a>, <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/includes\"><code>includes</code></a></td>\n<td align=\"left\">문자열 시작하고, 끝나고, 지정된 문자열을 포함하는지의 여부를 반환합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/concat\"><code>concat</code></a></td>\n<td align=\"left\">두 문자열의 텍스트를 결합하고 새로운 문자열을 반환합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\"><code>fromCharCode</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\"><code>fromCodePoint</code> (en-US)</a></td>\n<td align=\"left\">유니코드 값의 지정된 시퀀스로부터 문자열을 구축합니다. 문자열 인스턴스가 아닌 문자열 클래스의 메서드입니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>split</code></a></td>\n<td align=\"left\">부분 문자열로 문자열을 분리하여 문자열 배열로 문자열 개체를 분할합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/slice\"><code>slice</code></a></td>\n<td align=\"left\">문자열의 한 부분을 추출하고 새 문자열을 반환합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/substring\"><code>substring</code></a>, <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/substr\"><code>substr</code></a></td>\n<td align=\"left\">어느 시작 및 종료 인덱스 또는 시작 인덱스 및 길이를 지정하여, 문자열의 지정된 일부를 반환합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>match</code></a>, <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace</code></a>, <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>search</code></a></td>\n<td align=\"left\">정규 표현식으로 작업합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"><code>toLowerCase</code></a>, <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"><code>toUpperCase</code></a></td>\n<td align=\"left\">.모든 소문자 또는 대문자에서 각각 문자열을 반환합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\"><code>normalize</code></a></td>\n<td align=\"left\">호출 문자열 값의 유니 코드 표준화 양식을 반환합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\"><code>repeat</code></a></td>\n<td align=\"left\">주어진 회를 반복하는 개체 요소로 이루어진 문자열을 반환합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\"><code>trim</code></a></td>\n<td align=\"left\">문자열의 시작과 끝에서 공백을 자릅니다.</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>syntactic sugar (<code>$</code>)의 사용</p>\n<pre><code class=\"language-javascript\">var a = 5;\nvar b = 10;\nconsole.log(`Fifteen is ${a + b} and\\nnot ${2 * a + b}.`);\n// \"Fifteen is 15 and\n// not 20.\"\n</code></pre>\n</blockquote>\n<h1>JavaScript (4) - 정규 표현식</h1>\n<h3>정규식에서 쓰이는 Methods</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Method</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>exec</code></td>\n<td align=\"left\">대응되는 문자열을 찾는 <code>RegExp</code> 메소드입니다. 정보를 가지고 있는 배열을 반환합니다. 대응되는 문자열을 찾지 못했다면 null을 반환한다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>test</code></td>\n<td align=\"left\">대응되는 문자열이 있는지 검사하는 <code>RegExp</code> 메소드 입니다. true 나 false를 반환한다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>match</code></td>\n<td align=\"left\">대응되는 문자열을 찾는 <code>RegExp</code> 메소드입니다. 정보를 가지고 있는 배열을 반환한다. 대응되는 문자열을 찾지 못했다면 null을 반환한다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>search</code></td>\n<td align=\"left\">대응되는 문자열이 있는지 검사하는 <code>String</code> 메소드다. 대응된 부분의 인덱스를 반환한다. 대응되는 문자열을 찾지 못했다면 -1을 반환한다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>replace</code></td>\n<td align=\"left\">대응되는 문자열을 찾아 다른 문자열로 치환하는 <code>String</code> 메소드다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>split</code></td>\n<td align=\"left\">정규식 혹은 문자열로 대상 문자열을 나누어 배열로 반환하는 <code>String</code> 메소드다.</td>\n</tr>\n</tbody>\n</table>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide\">MDN - JavaScript 안내서</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference\">MDN - JavaScript 참고서</a></li>\n</ul>","id":"c54308e0-d7a2-5d1c-b8ae-ecbfd04ed1ac"},"allPosts":{"edges":[{"node":{"id":"7f695fca-e5ce-5c55-970b-e8855f99b61a"},"next":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}},"previous":null},{"node":{"id":"9f46ad6e-455d-53e9-8d4c-4794e5af39dd"},"next":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}},"previous":{"fields":{"slug":"/posts/hadoop/"},"frontmatter":{"title":"Hadoop"}}},{"node":{"id":"27ea8f29-94a3-5302-a637-efd0af842208"},"next":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}},"previous":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}}},{"node":{"id":"7470f1ce-f71d-5772-a8be-806ed3f7cc66"},"next":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}},"previous":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}}},{"node":{"id":"c54308e0-d7a2-5d1c-b8ae-ecbfd04ed1ac"},"next":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}},"previous":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}}},{"node":{"id":"c8b65dec-7fef-5ef0-a515-27ae182dff3e"},"next":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}},"previous":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}}},{"node":{"id":"6814abc2-41a1-520c-bd24-a8d2d02424fb"},"next":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}},"previous":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}}},{"node":{"id":"2fa87adf-6f94-54db-a8e4-7ab4990ba5e6"},"next":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}},"previous":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}}},{"node":{"id":"54319bda-39af-5fa4-9eee-7f84ee580c1a"},"next":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}},"previous":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}}},{"node":{"id":"2311c1d2-b785-582e-a9a9-d80750b5d505"},"next":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}},"previous":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}}},{"node":{"id":"2e8c37a8-a44a-5356-b617-dc7b22034c2a"},"next":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}},"previous":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}}},{"node":{"id":"443ae298-350d-531c-a42c-34e0acb0cdd8"},"next":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}},"previous":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}}},{"node":{"id":"64980158-2ad8-5c44-91a8-a0185a6d4f6b"},"next":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}},"previous":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}}},{"node":{"id":"5128821c-b701-5848-9979-bb91ec9c5836"},"next":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}},"previous":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}}},{"node":{"id":"d4549afd-0095-5810-b492-b843ca6e2f88"},"next":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}}},{"node":{"id":"46426481-29ee-5d00-aa6c-cf05d52490f6"},"next":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}}},{"node":{"id":"6eed9dfa-e294-5b19-a225-cd43d6cb982a"},"next":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}},"previous":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}}},{"node":{"id":"e46642ac-6d65-51b8-a535-21a9e3eabb56"},"next":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}},"previous":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}}},{"node":{"id":"f77c8cbf-3a58-53fc-bd32-592702676a11"},"next":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}},"previous":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}}},{"node":{"id":"f016fc75-8476-5493-8ac1-e2862773f3e7"},"next":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}},"previous":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}}},{"node":{"id":"9f5a9a91-7af6-5ca3-b20f-d6e177e46c68"},"next":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}},"previous":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}}},{"node":{"id":"b4e07799-70a4-523d-90ec-741e18230194"},"next":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}},"previous":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}}},{"node":{"id":"ef05bf06-2d53-5323-820b-98f46a906289"},"next":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}},"previous":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}}},{"node":{"id":"571df319-d1dd-59b6-a588-7a5db12c6b3d"},"next":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}},"previous":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}}},{"node":{"id":"a78eb59a-78b3-5c86-bcc2-f09ea58fab23"},"next":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}},"previous":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}}},{"node":{"id":"3c37f3d1-7097-5528-a31b-12bcdcd937ab"},"next":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}},"previous":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}}},{"node":{"id":"fe690dd1-ec0c-544b-a44f-131d80987565"},"next":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}},"previous":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}}},{"node":{"id":"6268f141-e6af-5f89-a55b-2174ef57651f"},"next":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}},"previous":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}}},{"node":{"id":"b8c8c26f-09bc-5759-8a7e-c81ffbc8f2c0"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}}},{"node":{"id":"1a663d51-139e-500f-a209-04faaebd2e85"},"next":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}},"previous":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}}},{"node":{"id":"b227a2c1-7853-5450-a1be-f3e1c83307b4"},"next":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"80979747-a7b7-5e5d-81bb-30729e2e16bd"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}}},{"node":{"id":"a82c048c-1eea-54e3-912d-ae875640e04e"},"next":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}},"previous":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}}},{"node":{"id":"18c2a54b-1a71-511c-824c-f437be00f3ef"},"next":{"fields":{"slug":"/posts/web-rtc/"},"frontmatter":{"title":"WebRTC"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"d54a4c19-013d-538a-893d-ff8f62d34d7a"},"next":{"fields":{"slug":"/posts/tomcat-사용법/"},"frontmatter":{"title":"Tomcat 사용법"}},"previous":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}}},{"node":{"id":"d2056881-058f-5f23-88ec-cf613dff77f0"},"next":null,"previous":{"fields":{"slug":"/posts/web-rtc/"},"frontmatter":{"title":"WebRTC"}}}]}},"pageContext":{"id":"c54308e0-d7a2-5d1c-b8ae-ecbfd04ed1ac"}},"staticQueryHashes":["2001315320"]}