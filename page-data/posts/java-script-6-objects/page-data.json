{"componentChunkName":"component---src-templates-single-post-js","path":"/posts/java-script-6-objects/","result":{"data":{"post":{"frontmatter":{"meta":{"title":"test meta title","description":"test meta description","noindex":null,"canonicalLink":null},"title":"JavaScript (6) - Objects","template":"SinglePost","subtitle":null,"date":"July 29th, 2021","categories":[{"category":"JavaScript"}]},"html":"<p><img src=\"https://gawoori.net/wp-content/uploads/2018/04/javascript-frameworks.jpg\" alt=\"javascript\"></p>\n<h1>JavaScript (6) - Objects</h1>\n<h2>Working with Objects</h2>\n<p>​\tJavaScript는 간단한 객체 기반 패러다임 상에서 만들어졌다. 객체는 프로퍼티의 모음이며 프로퍼티는 이름(key)과 값(value)의 연결로 이루어진다.  프로퍼티의 값으로 함수가 될 수 있는데, 이런 프로퍼티는 메소드라고 불린다. 브라우저 안에 미리 정의된 객체뿐 아니라 사용자들이 직접 자신만의 객체를 정의할 수도 있다. JavaScript의 객체는 Object의 특징을 결정짓는 여러 프로퍼티(속성)를 가진다.</p>\n<h3>객체와 프로퍼티</h3>\n<ul>\n<li>JavaScript의 객체에는 그와 연관된 프로퍼티가 있다. 프로퍼티는 객체에 붙은 변수(variable)라고 설명할 수 있다. </li>\n<li>객체의 프로퍼티는 일반 자바스크립의 변수와 기본적으로 똑같은데, 다만 객체에 속해있다는 차이만 있을 뿐이다. </li>\n<li>\n<p>객체의 프로퍼티들이 객체의 특징을 규정한다. 프로퍼티에 접근할 때는 도트(점) 표기법을 사용한다.</p>\n<pre><code class=\"language-javascript\">objectName.propertyName\n</code></pre>\n</li>\n<li>\n<p>JavaScript의 모든 변수가 그렇듯이, 객체의 이름과 프로퍼티 이름은 모두 대소문자를 구별한다. 프로퍼티를 새로 정의하려면 그냥 이름과 값을 추가하면 된다. </p>\n<pre><code class=\"language-javascript\">var myCar = new Object();\nmyCar.make = \"Ford\";\nmyCar.model = \"Mustang\";\nmyCar.year = 1969;\n</code></pre>\n</li>\n<li>\n<p>대괄호 표기법을 사용하여 객체의 프로퍼티에 접근할 수 있다. 객체는 연관배열(<em>associative arrays</em>)이라고도 불리는데, 각 프로퍼티는 하나의 문자열 이름과 연관되어(associated) 이것을 통해 접근할 수 있기 때문이다. 예를 들면 myCar 객체의 프로퍼티에 다음과 같이 접근할 수 있다.</p>\n<pre><code class=\"language-javascript\">myCar[\"make\"] = \"Ford\";\nmyCar[\"model\"] = \"Mustang\";\nmyCar[\"year\"] = 1969;\n</code></pre>\n</li>\n<li>객체의 프로퍼티 이름은 유효한 자바스크립트 문자열이거나 문자열로 변환이 가능한 것이면 어떤 것이든 가능하며, 심지어 빈 문자열도 된다. 하지만 자바스크립트 식별자(identifier)로 적합하지 않으면 (예 : 하이픈, 빈칸을 포함하거나 숫자로 시작하는 이름), 대괄호를 이용한 표기법으로만 접근이 가능하다. 이 표기법은 프로퍼티 이름이 사전에 미리 결정되지 않고 런타임 시점에 결정되는 경우에 특히 유용하다. </li>\n<li>\n<p>대괄호 표기법을 <code>for ... in</code>과 함께 사용하면 객체의 열거가능한 프로퍼티를 나열할 수 있다.</p>\n<pre><code class=\"language-javascript\">function showProps(obj, objName) {\nvar result = \"\";\nfor (var i in obj) {\n  if (obj.hasOwnProperty(i)) {\n      result += objName + \".\" + i + \" = \" + obj[i] + \"\\n\";\n  }\n}\nreturn result;\n}\n\nconsole.log(showProps(myCar, \"myCar\"));\n// myCar.make = Ford\n// myCar.model = Mustang\n// myCar.year = 1969\n</code></pre>\n</li>\n</ul>\n<h3>객체의 프로퍼티 나열하기</h3>\n<ol>\n<li>\n<p><code>for ... in</code> 루프</p>\n<p>객체와 객체의 프로토타입 체인 상의 열거 가능한 모든 프로퍼티를 순회한다.</p>\n</li>\n<li>\n<p><code>Objects.keys</code></p>\n<p>객체 자체에 속한 열거 가능한 프로퍼티 이름들(\"keys\")의 배열을 반환한다.</p>\n</li>\n<li>\n<p><code>Object.getOwnPropertyNames</code></p>\n<p>객체 자체의 모든  프로퍼티(열거 가능 여부에 무관) 이름들의 배열을 반환한다.</p>\n</li>\n</ol>\n<h3>객체 생성하기</h3>\n<ul>\n<li>\n<p>방법</p>\n<ol>\n<li><code>객체 Initializer</code> 이용</li>\n<li>\n<p><code>literal</code> 표기에 의한 객체 생성` 이라고도 불린다.</p>\n<pre><code class=\"language-javascript\">var obj = { property_1:   value_1,   // property_# may be an identifier...\n           2:            value_2,   // or a number...\n           // ...,\n           \"property n\": value_n }; // or a string \n</code></pre>\n</li>\n<li>생성자 함수 정의 후 <code>new</code> 연산자와 함께 이용</li>\n<li>\n<p>객체의 타입을 정의하려면 타입의 이름, 속성, 메소드 등을 기술하는 함수를 하나 만들어야 한다.</p>\n<pre><code class=\"language-javascript\">function Car(make, model, year) {\n this.make = make;\n this.model = model;\n this.year = year;\n}\n\nvar mycar = new Car(\"Eagle\", \"Talon TSi\", 1993);\n</code></pre>\n</li>\n<li><code>Object.create</code> 메서드 사용</li>\n<li>프로토타입 객체를 사용자가 직접 선택할 수 있기 때문에 유용하다. </li>\n<li>\n<p>객체 생성 시 생성자 함수가 없어도 가능하다.</p>\n<pre><code class=\"language-javascript\">// Animal properties and method encapsulation\nvar Animal = {\n type: \"Invertebrates\", // Default value of properties\n displayType : function(){  // Method which will display type of Animal\n   console.log(this.type);\n }\n}\n\n// Create new animal type called animal1\nvar animal1 = Object.create(Animal);\nanimal1.displayType(); // Output:Invertebrates\n\n// Create new animal type called Fishes\nvar fish = Object.create(Animal);\nfish.type = \"Fishes\";\nfish.displayType(); // Output:Fishes\n</code></pre>\n</li>\n</ol>\n</li>\n</ul>\n<h3>상속</h3>\n<ul>\n<li>JavaScript 에서의 모든 객체들은 최소한 하나의 다른 객체로부터 상속을 받는다. </li>\n<li>상속을 제공하는 객체를 프로토타입이라고 부르며, 상속되는 속성들은 <code>prototype</code> 이라는 생성자 객체에서 찾을 수 있다.</li>\n</ul>\n<h3>객체 참조를 위한 <code>this</code> 사용</h3>\n<ul>\n<li>메서드 내부에서 <code>this</code> 키워드를 사용하게 되면 해당 메서드를 포함한 객체를 가리키게 된다.</li>\n</ul>\n<h2>객체 모델의 세부사항</h2>\n<blockquote>\n<p> JavaScript는 클래스 기반이 아닌 prototype에 기초한 객체 기반 언어다. 이러한 차이점으로 인해 객체들의 계층 구조의 생성과 속성 및 속성 값의 상속을 어떻게 구현해야하는지에 대한 부분이 덜 분명할 수 있다.</p>\n</blockquote>\n<h3>클래스 기반과 prototype 기반 객체 시스템의 비교</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">클래스 기반(자바)</th>\n<th align=\"left\">원형 기반(자바스크립트)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">클래스와 인스턴스는 별개다. (예: 클래스-직원, 인스턴스-현지)</td>\n<td align=\"left\">모든 객체는 다른 객체로부터 상속을 받는다.</td>\n</tr>\n<tr>\n<td align=\"left\">클래스 정의를 가지고 클래스를 생성하고 생성자 메서드로 인스턴스를 생성한다.</td>\n<td align=\"left\">생성자 함수를 가지고 객체군을 정의 및 생성한다.</td>\n</tr>\n<tr>\n<td align=\"left\">new 연산자로 하나의 객체(인스턴스)를 생성한다.</td>\n<td align=\"left\">new 연산자로 하나의 객체(인스턴스)를 생성한다.</td>\n</tr>\n<tr>\n<td align=\"left\">이미 존재하는 클래스에 대한 하위 클래스를 정의함으로써 객체의 계층구조를 생성한다.</td>\n<td align=\"left\">하나의 객체를 생성자 함수와 결합된 프로토타입에 할당함으로써 객체의 계층구조를 생성한다.</td>\n</tr>\n<tr>\n<td align=\"left\">클래스의 상속 구조에 따라 속성을 상속 받는다.</td>\n<td align=\"left\">프로토타입 체인에 따라  속성을 상속 받는다.</td>\n</tr>\n<tr>\n<td align=\"left\">클래스 정의는 모든 인스턴스의 모든 속성을 명시한다. 실행시에 동적으로 속성을 추가할 수 없다.</td>\n<td align=\"left\">생성자 함수 혹은 프로토타입은 초기 속성들을 명시한다. 개별 객체 혹은 전체 객체군에 동적으로 속성을 추가 삭제할 수 있다.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>javascript</p>\n<pre><code class=\"language-javascript\">function Manager() {\nEmployee.call(this);\nthis.reports = [];\n}\nManager.prototype = Object.create(Employee.prototype);\n\nfunction WorkerBee() {\nEmployee.call(this);\nthis.projects = [];\n}\nWorkerBee.prototype = Object.create(Employee.prototype);\n</code></pre>\n</li>\n<li>\n<p>java</p>\n<pre><code class=\"language-java\">public class Manager extends Employee {\n public Employee[] reports = new Employee[0];\n}\n\npublic class WorkerBee extends Employee {\n public String[] projects = new String[0];\n}\n</code></pre>\n</li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Details_of_the_Object_Model</a></p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide\">MDN - JavaScript 안내서</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference\">MDN - JavaScript 참고서</a></li>\n</ul>","id":"6814abc2-41a1-520c-bd24-a8d2d02424fb"},"allPosts":{"edges":[{"node":{"id":"7f695fca-e5ce-5c55-970b-e8855f99b61a"},"next":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}},"previous":null},{"node":{"id":"9f46ad6e-455d-53e9-8d4c-4794e5af39dd"},"next":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}},"previous":{"fields":{"slug":"/posts/hadoop/"},"frontmatter":{"title":"Hadoop"}}},{"node":{"id":"27ea8f29-94a3-5302-a637-efd0af842208"},"next":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}},"previous":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}}},{"node":{"id":"7470f1ce-f71d-5772-a8be-806ed3f7cc66"},"next":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}},"previous":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}}},{"node":{"id":"c54308e0-d7a2-5d1c-b8ae-ecbfd04ed1ac"},"next":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}},"previous":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}}},{"node":{"id":"c8b65dec-7fef-5ef0-a515-27ae182dff3e"},"next":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}},"previous":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}}},{"node":{"id":"6814abc2-41a1-520c-bd24-a8d2d02424fb"},"next":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}},"previous":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}}},{"node":{"id":"2fa87adf-6f94-54db-a8e4-7ab4990ba5e6"},"next":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}},"previous":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}}},{"node":{"id":"54319bda-39af-5fa4-9eee-7f84ee580c1a"},"next":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}},"previous":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}}},{"node":{"id":"2311c1d2-b785-582e-a9a9-d80750b5d505"},"next":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}},"previous":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}}},{"node":{"id":"2e8c37a8-a44a-5356-b617-dc7b22034c2a"},"next":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}},"previous":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}}},{"node":{"id":"443ae298-350d-531c-a42c-34e0acb0cdd8"},"next":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}},"previous":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}}},{"node":{"id":"64980158-2ad8-5c44-91a8-a0185a6d4f6b"},"next":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}},"previous":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}}},{"node":{"id":"5128821c-b701-5848-9979-bb91ec9c5836"},"next":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}},"previous":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}}},{"node":{"id":"d4549afd-0095-5810-b492-b843ca6e2f88"},"next":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}}},{"node":{"id":"46426481-29ee-5d00-aa6c-cf05d52490f6"},"next":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}}},{"node":{"id":"6eed9dfa-e294-5b19-a225-cd43d6cb982a"},"next":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}},"previous":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}}},{"node":{"id":"e46642ac-6d65-51b8-a535-21a9e3eabb56"},"next":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}},"previous":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}}},{"node":{"id":"f77c8cbf-3a58-53fc-bd32-592702676a11"},"next":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}},"previous":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}}},{"node":{"id":"f016fc75-8476-5493-8ac1-e2862773f3e7"},"next":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}},"previous":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}}},{"node":{"id":"9f5a9a91-7af6-5ca3-b20f-d6e177e46c68"},"next":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}},"previous":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}}},{"node":{"id":"b4e07799-70a4-523d-90ec-741e18230194"},"next":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}},"previous":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}}},{"node":{"id":"ef05bf06-2d53-5323-820b-98f46a906289"},"next":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}},"previous":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}}},{"node":{"id":"571df319-d1dd-59b6-a588-7a5db12c6b3d"},"next":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}},"previous":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}}},{"node":{"id":"a78eb59a-78b3-5c86-bcc2-f09ea58fab23"},"next":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}},"previous":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}}},{"node":{"id":"3c37f3d1-7097-5528-a31b-12bcdcd937ab"},"next":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}},"previous":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}}},{"node":{"id":"fe690dd1-ec0c-544b-a44f-131d80987565"},"next":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}},"previous":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}}},{"node":{"id":"6268f141-e6af-5f89-a55b-2174ef57651f"},"next":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}},"previous":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}}},{"node":{"id":"b8c8c26f-09bc-5759-8a7e-c81ffbc8f2c0"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}}},{"node":{"id":"1a663d51-139e-500f-a209-04faaebd2e85"},"next":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}},"previous":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}}},{"node":{"id":"b227a2c1-7853-5450-a1be-f3e1c83307b4"},"next":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"80979747-a7b7-5e5d-81bb-30729e2e16bd"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}}},{"node":{"id":"a82c048c-1eea-54e3-912d-ae875640e04e"},"next":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}},"previous":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}}},{"node":{"id":"18c2a54b-1a71-511c-824c-f437be00f3ef"},"next":{"fields":{"slug":"/posts/web-rtc/"},"frontmatter":{"title":"WebRTC"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"d54a4c19-013d-538a-893d-ff8f62d34d7a"},"next":{"fields":{"slug":"/posts/tomcat-사용법/"},"frontmatter":{"title":"Tomcat 사용법"}},"previous":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}}},{"node":{"id":"d2056881-058f-5f23-88ec-cf613dff77f0"},"next":null,"previous":{"fields":{"slug":"/posts/web-rtc/"},"frontmatter":{"title":"WebRTC"}}}]}},"pageContext":{"id":"6814abc2-41a1-520c-bd24-a8d2d02424fb"}},"staticQueryHashes":["2001315320"]}