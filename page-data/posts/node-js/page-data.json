{"componentChunkName":"component---src-templates-single-post-js","path":"/posts/node-js/","result":{"data":{"post":{"frontmatter":{"meta":{"title":"test meta title","description":"test meta description","noindex":null,"canonicalLink":null},"title":"NodeJS","template":"SinglePost","subtitle":null,"date":"April 1st, 2020","categories":[{"category":"JavaScript"}]},"html":"<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Node.js_logo.svg/1200px-Node.js_logo.svg.png\" alt=\"nodejs\"></p>\n<h2>Node.js</h2>\n<p>Node.js는 구글의 <code>Chrome V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임</code>이다.   </p>\n<ul>\n<li>자바스크립트의 <code>간결함</code>과 V8 자바스크립트 엔진의 <code>빠른 속도</code> 그리고 <code>단일 스레드</code> <code>Non-bloking I/O</code>로 빠른 성능을 낸다.</li>\n<li>누구든지 자바스크립트로 패킷을 주고 받을 수 있어 서버를 간단하게 구현할 수 있다.</li>\n<li>일반적인 소켓 통신 뿐만 아니라 Node.js 자체를 <code>HTTP 웹 서버로 실행</code>할 수 있고, WebSocket(socket.io) 등의 <code>HTTP 기반 실시간 프로토콜</code>도 손쉽게 사용할 수 있다. 실시간 통신을 자바스크립트 단 몇줄로 구현할 수 있게 되어 생산성을 높였다.  </li>\n<li>결과적으로 Node.js는 자바스크립트를 웹 브라우저 속에서만 사용되던 언어에서 Python이나 Perl, Ruby와 같은 범용 스크립트 언어로 탈바꿈 시켰다.</li>\n</ul>\n<h3>npm (Node Packaged Modules)</h3>\n<p>Node.js로 만들어진 모듈을 인터넷에서 받아서 설치해주는 <code>패키지 매니저</code>이다.  </p>\n<ul>\n<li>수만개의 모듈을 <code>npm으로 설치</code>해서 쓸 수 있다.</li>\n</ul>\n<h3>단일 스레드 모델과 Non-blocking I/O</h3>\n<p>Node.js의 가장 큰 특징은 <code>단일 스레드 모델</code>과 <code>Non-blocking I/O</code>이다.  </p>\n<ul>\n<li>프로세스 안에서 스레드를 여러 개 만들고 여러 개 로직을 동시에 처리하는 멀티 스레드 방식은 복잡한 동기화 문제를 가졌다.  </li>\n<li>Node.js는 단일 스레드 모델과 Non-blocking I/O를 채택하여 생산성을 높였다.</li>\n</ul>\n<h3>Non-blocking I/O</h3>\n<p>비동기적 처리(Asyncronous Processing)의 태스크들을 호출 스택에서 태스크 큐로 보내거나 태스크 큐로 부터 이벤트 루프를 통해 다시 스택으로 가져오는 I/O의 형태를 말한다. 이에 따라 실행 순서에 영향을 미치는 행위를 <code>Non-Blocking I/O</code> 라고 간단히 말할 수 있다. 반대로 Blocking 의 경우 동기적 처리(Syncronous Processing)들에 대해 뒤에 작업들이 해당 작업으로 인해 지연되는 현상을 이야기한다.</p>\n<h3>설치하기</h3>\n<h4>소스 컴파일</h4>\n<p><a href=\"http://nodejs.org/download\">Node.js 다운로드</a></p>\n<h4>리눅스(우분투)</h4>\n<pre><code>sudo apt-get install node\n</code></pre>\n<p>  node를 설치하면 npm도 함께 설치가 된다.</p>\n<ul>\n<li>\n<p>패키지 설치</p>\n<pre><code>npm install 패키지명\n</code></pre>\n</li>\n<li>\n<p>패키지 전역 설치</p>\n<pre><code>npm install -g 패키지명\n</code></pre>\n</li>\n</ul>\n<h3>사용하기</h3>\n<h4>웹 서버 만들기</h4>\n<ul>\n<li>\n<p>app.js 작성</p>\n<pre><code class=\"language-javascript\">var http = require('http');\n</code></pre>\n</li>\n</ul>\n<p>  var server = http.createServer(function (req, res) {\nres.writeHead(200, { 'Content-Type' : 'text/plain' });\nres.end('Hello World');\n});</p>\n<p>  server.listen(8000);</p>\n<pre><code>- 실행\n</code></pre>\n<p>  $ node app.js</p>\n<pre><code>- 결과\nhttp://127.0.0.1:8000으로 접속\n\n#### express로 웹 서버 만들기\n`express`는 Node.js에서 가장 유명한 웹 프레임워크 모듈이다. express를 이용하면 더 간단하게 웹 서버를 만들 수 있고, 다양한 템플릿 엔진과 기능들을 사용할 수 있다.\n\n- 패키지 다운로드\n</code></pre>\n<p>  $ npm install express</p>\n<pre><code>- app.js 작성  \n```javascript\nvar express = require('express')\n  , http = require('http')\n  , app = express()\n  , server = http.createServer(app);\n\napp.get('/', function (req, res) {\n  res.send('Hello /');\n});\n\napp.get('/world.html', function (req, res) {\n  res.send('Hello World');\n});\n\nserver.listen(8000, function() {\n  console.log('Express server listening on port ' + server.address().port);\n});\n</code></pre>\n<ul>\n<li>require: 모듈을 로딩하는 함수이다. express, http 모듈을 로딩하고 변수에 저장된 express를 함수로 실행해서 app 객체를 생성한다. 그리고 http.createServer(app) 함수로 app 객체와 http 서버를 연결한다.</li>\n<li>app 객체에서 get 함수로 HTTP의 GET 메서드를 처리할 수 있다. get 함수에 경로를 지정하고, 웹 브라우저가 해당 경로에 접속했을 때 실행될 함수를 지정한다. 그리고 이 함수는 웹 브라우저가 접속할 때마다 실행된다. req는 요청(Request) 객체이고 res는 응답(Response) 객체다.</li>\n<li>웹 브라우저가 접속하면 이 콜백 함수에서 res의 send 함수를 실행하여 웹 브라우저에 표시할 내용을 보낸다. app 객체에 경로마다 응답할 함수를 지정하면 여러 개의 파일을 처리할 수 있다.</li>\n<li>app 객체에서 HTTP의 GET 메서드 뿐만 아니라 모든 메서드(POST, PUT, DELETE, OPTIONS, HEAD 등)를 처리할 수 있다. 다양한 HTTP 메서드를 간단하게 처리할 수 있어서 Node.js와 express로 RESTful 서비스를 손쉽게 만들 수 있습니다.</li>\n<li>http 모듈로 생성한 http 서버를 8000번 포트로 실행한다.</li>\n<li>\n<p>실행</p>\n<pre><code>node app.js\n</code></pre>\n</li>\n</ul>\n<h5>템플릿 엔진 사용하기</h5>\n<p><code>express</code>로 웹 서버를 만들더라도 많은 경로(파일)를 하나하나 정의하기에는 무리가 있다. express에서 템플릿 엔진을 사용하면 PHP나 ASP, JSP 처럼 <code>서버에서 HTML을 동적으로 생성</code>할 수 있다. 또한, HTML 태그를 전부 입력하지 않고, <code>간단한 문법</code>으로 웹 페이지를 만들 수 있다.</p>\n<ul>\n<li>\n<p><code>router</code> 사용</p>\n<ul>\n<li>EJS(Embedded JavaScript): </li>\n<li>Jade</li>\n</ul>\n</li>\n</ul>\n<h4>실시간 통신 사용하기</h4>\n<p>Node.js는 다양한 실시간 통신 기술을 지원하고, 복잡한 코드 없이 간단하게 만들 수 있다.   </p>\n<p>Node.js에서 사용할 수 있는 대표적인 <code>실시간 통신 기술</code></p>\n<ul>\n<li>TCP socket: 기본 내장 net 모듈로 TCP 소켓을 사용할 수 있다.</li>\n<li>WebSocket: HTTP 프로토콜을 기반으로 <code>양방향 통신</code>(full-duplex)을 구현한 것이다. 기존 HTTP 프로토콜은 서버 방향으로 요청 후 응답만 받을 수 있었고, 클라이언트 방향으로는 요청을 할 수 없었다. 또한, WebSocket은 HTTP 프로토콜을 기반으로 하고 있기 때문에 방화벽에서 걸러지는 경우가 적다. WebSocket은 모든 브라우저에서 지원하지는 않는다.</li>\n<li>socket.io: WebSocket 등 실시간 통신 기술의 웹 <code>브라우저 호환성 문제를 해결</code>하기 위해 생긴 프로젝트이다. 옛날 IE6 부터 최신 웹 브라우저까지 지원한다. WebSocket, Flash Socket, AJAX Long Polling, AJAX Multipart Streaming, Forever iframe, JSONP Polling 기술을 모두 포함하고 있으며 웹 브라우저의 종류와 버전에 따라 최적화된 기술을 알아서 사용한다. 따라서 사용자는 여러 가지 실시간 통신 기술을 신경쓸 필요 없이 일관된 API와 문법을 사용하여 개발할 수 있다.</li>\n</ul>\n<h5>WebSocket 사용 예시</h5>\n<ul>\n<li>\n<p>websocket 설치</p>\n<pre><code>~$ mkdir ExampleWebSocket\n~/ExampleWebSocket$ npm install websocket\n</code></pre>\n</li>\n<li>\n<p>app.js 작성: 클라이언트에서 받은 메시지를 다시 클라이언트로 보내는 예제</p>\n<pre><code class=\"language-javascript\">var WebSocketServer = require('websocket').server;\nvar http = require('http');\n</code></pre>\n</li>\n</ul>\n<p>  var server = http.createServer(function (req, res) {\nconsole.log('Received request for ' + req.url);\nres.writeHead(404);\nres.end();\n});</p>\n<p>  server.listen(8000, function () {\nconsole.log('Server is listening on port 8000');\n});</p>\n<p>  wsServer = new WebSocketServer({\nhttpServer: server,\nautoAcceptConnections: false\n});</p>\n<p>  wsServer.on('request', function (request) {\nvar connection = request.accept('example-echo', request.origin);\nconnection.on('message', function (message) {\nif (message.type === 'utf8') {\nconsole.log('Received message: ' + message.utf8Data);\nconnection.sendUTF(message.utf8Data);\n}\nelse if (message.type === 'binary') {\nconnection.sendBytes(message.binaryData);\n}</p>\n<pre><code>  connection.on('close', function (reasonCode, description) {\n    console.log('Peer ' + connection.remoteAddress + ' disconnected.');\n  });\n});\n</code></pre>\n<p>  });</p>\n<pre><code>- index.html: 웹 브라우저에서 WebSocket을 사용 (jQuery 사용)\n```html\n&#x3C;!DOCTYPE HTML>\n&#x3C;html>\n&#x3C;head>\n  &#x3C;title>Example WebSocket&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n\n&#x3C;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\">&#x3C;/script>\n&#x3C;script type=\"text/javascript\">\nif ('WebSocket' in window) {\n  var ws = new WebSocket('ws://127.0.0.1:8000', 'example-echo');\n\n  ws.onopen = function () {\n    $('#status').text('connected');\n\n    for (var i = 0; i &#x3C; 10; i++) {\n      ws.send('Hello ' + i);\n    }\n  };\n\n  ws.onmessage = function (evt) {\n    $('#messages').append($('&#x3C;li>').text('Received message: ' + evt.data));\n  };\n\n  ws.onclose = function () {\n    $('#status').text('connection is closed');\n  };\n}\nelse\n  $('#status').text('WebSocket not supported.');\n&#x3C;/script>\n\nStatus: &#x3C;span id=\"status\">&#x3C;/span>&#x3C;br />&#x3C;br />\nMessages: &#x3C;ul id=\"messages\">&#x3C;/ul>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<h5>socket.io 사용 예시</h5>\n<p><a href=\"http://pyrasis.com/nodejs/nodejs-HOWTO\">http://pyrasis.com/nodejs/nodejs-HOWTO</a></p>\n<h4>모듈 작성하기</h4>\n<p>웹 브라우저의 자바스크립트는 HTML에서 <code>script 태그로 로딩</code>한다. 하지만 지금까지 자바스크립트끼리는 서로 로딩할 방법이 없었는데 최근 여러 가지 표준이 개발되었고, node.js는 <code>CommonJS 모듈 방식</code>을 사용한다.  </p>\n<ul>\n<li><code>require() 함수</code>로 모듈을 로딩하여 사용<br>\nnode_modeuls directory 안의 패키지화 된 모듈이나 사용자가 만든 파일 등을 로딩할 수 있다.</li>\n<li>사용 예시\n<a href=\"http://pyrasis.com/nodejs/nodejs-HOWTO\">http://pyrasis.com/nodejs/nodejs-HOWTO</a></li>\n</ul>\n<h4>package.json</h4>\n<p>개발한 Node.js 어플리케이션을 서버에 배포할 때 <code>package.json</code> 파일이 필수이다.<br>\npackage.json 파일은 현재 어플리케이션에서 사용하고 있는 npm 모듈을 정의한다. 그래서 npm 명령은 package.json 파일을 읽어서 모듈을 설치한다.   </p>\n<ul>\n<li>package.json 파일은 소스의 <code>최상위 디렉터리</code>에 위치해야 한다.  </li>\n<li><code>dependencies</code> 부분에서 npm 모듈의 이름과 버전을 지정한다.  </li>\n<li>package.json 파일을 작성하고 <code>npm install</code> 명령을 입력하면 정의된 모듈을 설치한다.  </li>\n</ul>\n<p>package.json 파일에 프로젝트의 모든 정보를 기록한다. 각 항목의 의미는 다음과 같다.</p>\n<ul>\n<li>name: 프로젝트 이름</li>\n<li>version: 프로젝트 버전 정보</li>\n<li>description: 프로젝트 설명</li>\n<li>main: 노드 어플리케이션일 경우 진입점 경로. 프론트엔드 프로젝트일 경우 사용하지 않는다.</li>\n<li>scripts: 프로젝트 명령어를 등록할 수 있다.초기화시 test 명령어가 샘플로 등록되어 있다</li>\n<li>author: 프로그램 작성자</li>\n<li>license: 라이센스</li>\n</ul>\n<h4>project 명령어</h4>\n<ul>\n<li>start: 어플리케이션 실행</li>\n<li>test: 테스트</li>\n<li>install: 패키지 설치</li>\n<li>uninstall: 패키지 삭제</li>\n</ul>\n<h4>환경변수 설정하기</h4>\n<ul>\n<li>\n<p>리눅스에서 환경 변수 설정하기</p>\n<pre><code>$ NODE_ENV=\"production\" node app.js\n</code></pre>\n</li>\n</ul>\n<h3>reference</h3>\n<ul>\n<li>Node.js와 npm 설치: <a href=\"https://jeonghwan-kim.github.io/series/2019/12/09/frontend-dev-env-npm.html\">https://jeonghwan-kim.github.io/series/2019/12/09/frontend-dev-env-npm.html</a></li>\n<li>npm jquery package: <a href=\"https://www.npmjs.com/package/jquery\">https://www.npmjs.com/package/jquery</a>, <a href=\"https://iotcenter.seoul.go.kr/629\">https://iotcenter.seoul.go.kr/629</a></li>\n<li><a href=\"http://pyrasis.com/nodejs/nodejs-HOWTO#section-12\">http://pyrasis.com/nodejs/nodejs-HOWTO#section-12</a></li>\n</ul>","id":"3c37f3d1-7097-5528-a31b-12bcdcd937ab"},"allPosts":{"edges":[{"node":{"id":"7f695fca-e5ce-5c55-970b-e8855f99b61a"},"next":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}},"previous":null},{"node":{"id":"9f46ad6e-455d-53e9-8d4c-4794e5af39dd"},"next":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}},"previous":{"fields":{"slug":"/posts/hadoop/"},"frontmatter":{"title":"Hadoop"}}},{"node":{"id":"27ea8f29-94a3-5302-a637-efd0af842208"},"next":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}},"previous":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}}},{"node":{"id":"7470f1ce-f71d-5772-a8be-806ed3f7cc66"},"next":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}},"previous":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}}},{"node":{"id":"c54308e0-d7a2-5d1c-b8ae-ecbfd04ed1ac"},"next":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}},"previous":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}}},{"node":{"id":"c8b65dec-7fef-5ef0-a515-27ae182dff3e"},"next":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}},"previous":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}}},{"node":{"id":"6814abc2-41a1-520c-bd24-a8d2d02424fb"},"next":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}},"previous":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}}},{"node":{"id":"2fa87adf-6f94-54db-a8e4-7ab4990ba5e6"},"next":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}},"previous":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}}},{"node":{"id":"54319bda-39af-5fa4-9eee-7f84ee580c1a"},"next":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}},"previous":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}}},{"node":{"id":"2311c1d2-b785-582e-a9a9-d80750b5d505"},"next":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}},"previous":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}}},{"node":{"id":"2e8c37a8-a44a-5356-b617-dc7b22034c2a"},"next":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}},"previous":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}}},{"node":{"id":"443ae298-350d-531c-a42c-34e0acb0cdd8"},"next":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}},"previous":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}}},{"node":{"id":"64980158-2ad8-5c44-91a8-a0185a6d4f6b"},"next":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}},"previous":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}}},{"node":{"id":"5128821c-b701-5848-9979-bb91ec9c5836"},"next":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}},"previous":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}}},{"node":{"id":"d4549afd-0095-5810-b492-b843ca6e2f88"},"next":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}}},{"node":{"id":"46426481-29ee-5d00-aa6c-cf05d52490f6"},"next":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}}},{"node":{"id":"6eed9dfa-e294-5b19-a225-cd43d6cb982a"},"next":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}},"previous":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}}},{"node":{"id":"e46642ac-6d65-51b8-a535-21a9e3eabb56"},"next":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}},"previous":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}}},{"node":{"id":"f77c8cbf-3a58-53fc-bd32-592702676a11"},"next":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}},"previous":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}}},{"node":{"id":"f016fc75-8476-5493-8ac1-e2862773f3e7"},"next":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}},"previous":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}}},{"node":{"id":"9f5a9a91-7af6-5ca3-b20f-d6e177e46c68"},"next":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}},"previous":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}}},{"node":{"id":"b4e07799-70a4-523d-90ec-741e18230194"},"next":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}},"previous":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}}},{"node":{"id":"ef05bf06-2d53-5323-820b-98f46a906289"},"next":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}},"previous":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}}},{"node":{"id":"571df319-d1dd-59b6-a588-7a5db12c6b3d"},"next":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}},"previous":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}}},{"node":{"id":"a78eb59a-78b3-5c86-bcc2-f09ea58fab23"},"next":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}},"previous":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}}},{"node":{"id":"3c37f3d1-7097-5528-a31b-12bcdcd937ab"},"next":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}},"previous":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}}},{"node":{"id":"fe690dd1-ec0c-544b-a44f-131d80987565"},"next":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}},"previous":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}}},{"node":{"id":"6268f141-e6af-5f89-a55b-2174ef57651f"},"next":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}},"previous":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}}},{"node":{"id":"b8c8c26f-09bc-5759-8a7e-c81ffbc8f2c0"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}}},{"node":{"id":"1a663d51-139e-500f-a209-04faaebd2e85"},"next":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}},"previous":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}}},{"node":{"id":"b227a2c1-7853-5450-a1be-f3e1c83307b4"},"next":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"80979747-a7b7-5e5d-81bb-30729e2e16bd"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}}},{"node":{"id":"a82c048c-1eea-54e3-912d-ae875640e04e"},"next":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}},"previous":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}}},{"node":{"id":"18c2a54b-1a71-511c-824c-f437be00f3ef"},"next":{"fields":{"slug":"/posts/web-rtc/"},"frontmatter":{"title":"WebRTC"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"d54a4c19-013d-538a-893d-ff8f62d34d7a"},"next":{"fields":{"slug":"/posts/tomcat-사용법/"},"frontmatter":{"title":"Tomcat 사용법"}},"previous":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}}},{"node":{"id":"d2056881-058f-5f23-88ec-cf613dff77f0"},"next":null,"previous":{"fields":{"slug":"/posts/web-rtc/"},"frontmatter":{"title":"WebRTC"}}}]}},"pageContext":{"id":"3c37f3d1-7097-5528-a31b-12bcdcd937ab"}},"staticQueryHashes":["2001315320"]}