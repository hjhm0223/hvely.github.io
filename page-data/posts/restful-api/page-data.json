{"componentChunkName":"component---src-templates-single-post-js","path":"/posts/restful-api/","result":{"data":{"post":{"frontmatter":{"meta":{"title":"test meta title","description":"test meta description","noindex":null,"canonicalLink":null},"title":"Restful API","template":"SinglePost","subtitle":null,"date":"April 7th, 2020","categories":[{"category":"Study"}]},"html":"<p><img src=\"https://gmlwjd9405.github.io/images/network/rest.png\" alt=\"Restful API\"></p>\n<ul>\n<li>\n<p><a href=\"#REST(Representational-State-Transfer)-%EB%9E%80?\">REST란?</a></p>\n<ul>\n<li><a href=\"##%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\">구성요소</a></li>\n<li><a href=\"##%ED%8A%B9%EC%84%B1\">특성</a></li>\n<li><a href=\"##REST-Interface-%EA%B7%9C%EC%B9%99\">REST Interface 규칙</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#REST-API(Representational-State-Transfer-Application-Programming-Interface)-%EB%9E%80?\">REST API란?</a></p>\n<ul>\n<li><a href=\"##%ED%8A%B9%EC%A7%95\">특징</a></li>\n<li><a href=\"##REST-Interface-%EA%B7%9C%EC%B9%99\">REST Interface 규칙</a></li>\n<li><a href=\"##REST-API-%EC%84%A4%EA%B3%84-%EA%B8%B0%EB%B3%B8-%EA%B7%9C%EC%B9%99\">REST API 설계 기본 규칙</a></li>\n<li><a href=\"##URI-%EC%84%A4%EA%B3%84-%EA%B7%9C%EC%B9%99\">URI 설계 규칙</a></li>\n<li><a href=\"##Request-Methods\">Request Methods</a></li>\n<li><a href=\"###%EC%84%B1%EA%B3%B5-%EC%9D%91%EB%8B%B5-%EC%BD%94%EB%93%9C\">성공 응답 코드</a></li>\n<li><a href=\"###%EC%8B%A4%ED%8C%A8-%EC%9D%91%EB%8B%B5-%EC%BD%94%EB%93%9C\">실패 응답 코드</a></li>\n<li><a href=\"###%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%9E%A5%EC%95%A0-%EC%BD%94%EB%93%9C\">서비스 장애 코드</a></li>\n</ul>\n</li>\n<li><a href=\"#References\">References</a></li>\n</ul>\n<h1>REST(Representational State Transfer) 란?</h1>\n<p>자원을 이름으로 구분하여 해당 자원의 상태(정보)를 주고 받는 모든 것을 의미</p>\n<ul>\n<li>REST는 기본적으로 웹의 기존 기술과 HTTP 프로토콜을 그대로 활용하기 때문에 웹의 장점을 최대한 활용할 수 있는 아키텍처 스타일 </li>\n<li>HTTP URI(Uniform Resource Identifier)를 통해 자원을 명시하고, <code>HTTP Method</code>(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD Operation을 적용하는 것을 의미    </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>역할</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>POST</td>\n<td>리소스 생성</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>리소스 조회, 해당 도큐먼트에 대한 자세한 정보 가져오기</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>리소스 수정</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>리소스 삭제</td>\n</tr>\n</tbody>\n</table>\n<h2>구성요소</h2>\n<ul>\n<li>\n<p>자원(Resource)</p>\n<ul>\n<li>Uniform Resource Identifier(URI)</li>\n</ul>\n</li>\n<li>\n<p>행위(Verb)</p>\n<ul>\n<li>HyperText Transfer Protocaol(HTTP) Method </li>\n</ul>\n</li>\n<li>표현(Representation)</li>\n</ul>\n<h2>특성</h2>\n<p>Web 확장에 따라 <code>constraints</code>를 6가지 항목으로 정의</p>\n<ol>\n<li>\n<p>client-server 구조</p>\n<ul>\n<li>클라이언트와 서버가 서로 독립적으로 구분되어야 함</li>\n<li>클라이언트 또는 서버 증설 시 서로의 의존성 때문에 확장에 문제가 되는 일이 없어야 함</li>\n</ul>\n</li>\n<li>\n<p>Uniform interface</p>\n<ul>\n<li>각각의 고유 식별자를 가져야 함(URI)</li>\n<li>서버와 클라이언트 간 상호작용은 일관된 인터페이스 위에서 이루어짐(특정 언어에나 기술에 종속되지 않음)</li>\n</ul>\n</li>\n<li>\n<p>Layered system</p>\n<ul>\n<li>클라이언트와 서버 사이의 gateway, proxy, 방화벽 등과 같은 네트워크 기반의 매개체가 존재</li>\n<li>layer를 추가하거나 수정, 삭제할 수 있어야 함</li>\n<li>확장성을 가짐</li>\n</ul>\n</li>\n<li>\n<p>Cache</p>\n<ul>\n<li>HTTP가 가진 캐싱 기능 적용 가능</li>\n<li>캐시를 가질 경우, 클라이언트가 캐시를 통해서 응답을 재사용할 수 있음</li>\n<li>서버의 부하를 낮추는 중요한 역할</li>\n</ul>\n</li>\n<li>\n<p>Stateless</p>\n<ul>\n<li>통신 시 웹 서버가 클라이언트의 상태 정보를 저장하지 않아도 됨.</li>\n<li>HTTP는 비상태 프로토콜, 클라이언트에서 상태 관리는 쿠키, 서버에서 상태 관리는 세션</li>\n</ul>\n</li>\n<li>\n<p>Code-on-demand</p>\n<ul>\n<li>client의 요구에 따라 server로부터 code를 받을 수 있음</li>\n<li>특정 시점에 서버가 특정 기능을 수행하는 스크립트나 플러그인을 클라이언트에게 전달해 해당 기능을 동작하도록 함</li>\n</ul>\n</li>\n</ol>\n<h2>REST Interface 규칙</h2>\n<ul>\n<li>resource 식별: resource는 URI와 같은 고유 식별자로 표현</li>\n<li>표현을 위한 resource 처리: 같은 resource를 JSON, XML, HTML과 같이 다양한 형태로 표현 가능. 데이터 자체는 변경되지 않음</li>\n<li>자기 표현 메시지: HTTP 통신시, 헤더에 메타 데이터 정보를 추가하여 데이터에 대한 설명을 담을 수 있음</li>\n<li>application 상태에 대한 하이퍼미디어: 단순한 데이터 전달이 아닌 링크 정보를 포함하여 웹을 구성</li>\n</ul>\n<h1>REST API(Representational State Transfer Application Programming Interface) 란?</h1>\n<p>REST 기반으로 서비스 API를 구현한 것</p>\n<h2>특징</h2>\n<ul>\n<li>REST 기반으로 시스템을 분산하여 확장성과 재사용성을 높여 유지보수 및 운용이 편리</li>\n<li>REST는 HTTP 표준을 기반으로 구현하므로, HTTP를 지원하는 프로그램 언어로 클라이언트, 서버 구현 가능</li>\n</ul>\n<h2>REST API 설계 기본 규칙</h2>\n<ol>\n<li>\n<p>URI로 resource을 표현</p>\n<ul>\n<li>동사보다는 명사, 대문자보다는 소문자</li>\n<li><code>document</code>(객체) 이름은 단수 명사</li>\n<li><code>collection</code>(document의 집합, directory) 이름은 복수 명사</li>\n<li>\n<p><code>store</code>(resource 저장소) 이름은 복수 명사</p>\n<pre><code>GET /Member/1 (X)\nGET /members/1 (O)\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>resource에 대한 행위는 <code>HTTP Method</code>로 표현</p>\n<ul>\n<li>URI에 HTTP Method가 들어가면 안됨</li>\n<li>URI에 행위에 대한 동사가 들어가면 안됨</li>\n<li>\n<p>경로 중 변하는 부분(id)는 유일한 값으로 대체  </p>\n<pre><code>GET /members/delete/1 (X)\nDELETE /members/1 (O)\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h4>URI 설계 규칙</h4>\n<ul>\n<li>\n<p>'/'(슬래시)는 계층 관계를 나타내는 데 사용</p>\n<pre><code>GET : /users/{userid}/devices\n</code></pre>\n</li>\n<li>마지막에 '/'(슬래시)를 포함하지 않음</li>\n<li>가독성을 위해 '_'보다 '-'(하이픈)을 사용</li>\n<li>소문자 사용</li>\n<li>\n<p>파일 확장자는 포함하지 않고, Accept header 사용</p>\n<pre><code>GET /members/soccer/345/photo HTTP/1.1 Host: restapi.example.com Accept: image/jpg\n</code></pre>\n</li>\n</ul>\n<h2>Request Methods</h2>\n<table>\n<thead>\n<tr>\n<th>상태코드</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1xx</td>\n<td>프로토콜 수준의 정보 전달</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>성공 응답 코드</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>실패 응답 코드, 클라이언트의 추가적인 action이 필요</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>실패 응답 코드, 클라이언트 실수</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>서비스 장애 코드</td>\n</tr>\n</tbody>\n</table>\n<h3>성공 응답 코드</h3>\n<ul>\n<li>200 : [OK]</li>\n<li>\n<p>201 : [Created]</p>\n<ul>\n<li>200과 달리 요청에 성공하고, 새로운 리소스를 만든 경우에 응답한다.</li>\n<li>POST, PUT에 사용한다.</li>\n</ul>\n</li>\n<li>\n<p>202 : [Accepted]</p>\n<ul>\n<li>\n<p>클라이언트 요청을 받은 후, 요청은 유효하나 서버가 아직 처리하지 않은 경우에 응답한다. (비동기 작업)</p>\n<ul>\n<li>요청에 대한 응답이 일정 시간 후 완료되는 작업의 경우<br>작업 완료 후 클라이언트에 알릴 수 있는 server push 작업을 하거나, 클라이언트가 해당 작업의 진행 상황을 조회할 수 있는 URL을 응답해야 한다.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-JSON\">HTTP/1.1 202 Accepted\n{\n    \"links\": [\n        {\n            \"rel\": \"self\",\n            \"method\": \"GET\",\n            \"href\":  \"https://api.test.com/v1/users/3\"\n        }\n    ] \n}\n</code></pre>\n</li>\n<li>\n<p>204 : [No Content]</p>\n<ul>\n<li>응답 body가 필요 없는 자원 삭제 요청(DELETE) 같은 경우 응답한다.</li>\n<li>200 응답 후 body에 null, {}, [], false로 응답하는 것과 다르다.<br>(204의 경우 HTTP body가 아예 없음)</li>\n</ul>\n</li>\n</ul>\n<h3>실패 응답 코드</h3>\n<ul>\n<li>\n<p>301</p>\n<ul>\n<li>클라이언트가 요청한 리소스에 대한 URI가 변경되었을 때 사용</li>\n<li>응답 시 Location header에 변경된 URI를 적어줘야 함</li>\n</ul>\n</li>\n<li>\n<p>400 : [Bad Request]</p>\n<ul>\n<li>클라이언트 요청이 미리 정의된 파라미터 요구사항을 위반한 경우</li>\n<li>파라미터의 위치(path, query, body), 사용자 입력 값, 에러 이유 등을 반드시 알린다</li>\n</ul>\n<p>case 1</p>\n<pre><code>{\n    \"message\" : \"'name'(body) must be Number, input 'name': test123\"\n}\n</code></pre>\n<p>case 2</p>\n<pre><code>{\n    \"errors\": [\n        {\n            \"location\": \"body\",\n            \"param\": \"name\",\n            \"value\": \"test123\",\n            \"msg\": \"must be Number\"\n        }\n    ]\n}\n</code></pre>\n</li>\n<li>401 : [Unauthorized]</li>\n<li>\n<p>403 : [Forbidden]</p>\n<ul>\n<li>해당 요청은 유효하나 서버 작업 중 접근이 허용되지 않은 자원을 조회하려는 경우</li>\n<li>접근 권한이 전체가 아닌 일부만 허용되어 요청자의 접근이 불가한 자원에 접근 시도한 경우 응답한다.</li>\n</ul>\n</li>\n<li>404 : [Not Found]</li>\n<li>\n<p>405 : [Method Not Allowed]</p>\n<ul>\n<li>405 code는 404 code와 혼동될 수 있기 때문에 룰을 잘 정하고 시작한다.</li>\n<li>POST /users/1의 경우 404로 응답한다고 생각할 수 있지만, 경우에 따라 405로 응답할 수 있다. <br>/users/:id URL은 GET, PATCH, DELETE method는 허용되고 POST는 불가한 URL이다.</li>\n<li>만약 id가 1인 사용자가 없는 경우엔 404로 응답하지만(GET, PATCH, DELETE의 경우), POST /users/1는 /users/:id URL이 POST method를 제공하지 않기 때문에 405로 응답하는 게 옳다.</li>\n</ul>\n</li>\n<li>\n<p>409 : [Conflict]</p>\n<ul>\n<li>\n<p>해당 요청의 처리가 비지니스 로직상 불가능하거나 모순이 생긴 경우\ne.g.) DELETE /users/hak의 경우, 비지니스 로직상 사용자의 모든 자원이 비어있을 때만 사용자를 삭제할 수 있는 규칙이 있을 때 409로 응답한다.</p>\n<pre><code>409 Conflict\n{   \n\"message\" : \"first, delete connected resources.\"\n\"links\": [\n    {\n        \"rel\": \"posts.delete\",\n        \"method\": \"DELETE\",\n        \"href\":  \"https://api.test.com/v1/users/hak/posts\"\n    },\n    {\n        \"rel\": \"comments.delete\",\n        \"method\": \"DELETE\",\n        \"href\":  \"https://api.test.com/v1/users/hak/comments\"\n    }\n]\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>429 : [Too Many Requests]</p>\n<ul>\n<li>DoS, Brute-force attack 같은 비정상적인 접근을 막기 위해 요청의 수를 제한한다.</li>\n</ul>\n</li>\n</ul>\n<h3>서비스 장애 코드</h3>\n<ul>\n<li>\n<p>500</p>\n<ul>\n<li>API Server level에선 나지 않음</li>\n<li>API Server를 서빙하는 웹서버(apache, nginx)가 오류일 때 가능    </li>\n</ul>\n</li>\n</ul>\n<h1>References</h1>\n<ul>\n<li>REST API: <a href=\"https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html\">https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html</a>    </li>\n<li>URI 설계 규칙: <a href=\"https://medium.com/@dydrlaks/rest-api-3e424716bab\">https://medium.com/@dydrlaks/rest-api-3e424716bab</a>   </li>\n<li>REST API 설계 규칙: <a href=\"https://meetup.toast.com/posts/92\">https://meetup.toast.com/posts/92</a></li>\n</ul>","id":"54319bda-39af-5fa4-9eee-7f84ee580c1a"},"allPosts":{"edges":[{"node":{"id":"7f695fca-e5ce-5c55-970b-e8855f99b61a"},"next":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}},"previous":null},{"node":{"id":"9f46ad6e-455d-53e9-8d4c-4794e5af39dd"},"next":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}},"previous":{"fields":{"slug":"/posts/hadoop/"},"frontmatter":{"title":"Hadoop"}}},{"node":{"id":"27ea8f29-94a3-5302-a637-efd0af842208"},"next":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}},"previous":{"fields":{"slug":"/posts/java-script-1-개요/"},"frontmatter":{"title":"JavaScript (1) - 개요"}}},{"node":{"id":"7470f1ce-f71d-5772-a8be-806ed3f7cc66"},"next":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}},"previous":{"fields":{"slug":"/posts/java-script-2-문법과-자료형/"},"frontmatter":{"title":"JavaScript (2) - 문법과 자료형"}}},{"node":{"id":"c54308e0-d7a2-5d1c-b8ae-ecbfd04ed1ac"},"next":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}},"previous":{"fields":{"slug":"/posts/java-script-3-제어흐름과-에러처리-loop-함수-표현식과-연산자-숫자와-날짜-텍스트-서식-정규-표현식/"},"frontmatter":{"title":"JavaScript (3) - 제어흐름과 에러처리, Loop, 함수, 표현식과 연산자, 숫자와 날짜, 텍스트 서식, 정규 표현식"}}},{"node":{"id":"c8b65dec-7fef-5ef0-a515-27ae182dff3e"},"next":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}},"previous":{"fields":{"slug":"/posts/java-script-4-loop와-반복-함수-표현식과-연산자-숫자와-날자-텍스트-서식-정규표현식/"},"frontmatter":{"title":"JavaScript (4) - Loop와 반복, 함수, 표현식과 연산자, 숫자와 날자, 텍스트 서식, 정규표현식"}}},{"node":{"id":"6814abc2-41a1-520c-bd24-a8d2d02424fb"},"next":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}},"previous":{"fields":{"slug":"/posts/java-script-5-collections/"},"frontmatter":{"title":"JavaScript (5) - Collections"}}},{"node":{"id":"2fa87adf-6f94-54db-a8e4-7ab4990ba5e6"},"next":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}},"previous":{"fields":{"slug":"/posts/java-script-6-objects/"},"frontmatter":{"title":"JavaScript (6) - Objects"}}},{"node":{"id":"2311c1d2-b785-582e-a9a9-d80750b5d505"},"next":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}},"previous":{"fields":{"slug":"/posts/java-script-7-반복기-및-생성기-메타-프로그래밍/"},"frontmatter":{"title":"JavaScript (7) - 반복기 및 생성기, 메타 프로그래밍"}}},{"node":{"id":"54319bda-39af-5fa4-9eee-7f84ee580c1a"},"next":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}},"previous":{"fields":{"slug":"/posts/ci-cd/"},"frontmatter":{"title":"CI/CD"}}},{"node":{"id":"443ae298-350d-531c-a42c-34e0acb0cdd8"},"next":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}},"previous":{"fields":{"slug":"/posts/restful-api/"},"frontmatter":{"title":"Restful API"}}},{"node":{"id":"2e8c37a8-a44a-5356-b617-dc7b22034c2a"},"next":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}},"previous":{"fields":{"slug":"/posts/di와-자동-di/"},"frontmatter":{"title":"DI와 자동 DI"}}},{"node":{"id":"64980158-2ad8-5c44-91a8-a0185a6d4f6b"},"next":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}},"previous":{"fields":{"slug":"/posts/annotation/"},"frontmatter":{"title":"Annotation"}}},{"node":{"id":"5128821c-b701-5848-9979-bb91ec9c5836"},"next":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}},"previous":{"fields":{"slug":"/posts/spring-mvc-pattern/"},"frontmatter":{"title":"Spring MVC Pattern"}}},{"node":{"id":"d4549afd-0095-5810-b492-b843ca6e2f88"},"next":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-2/"},"frontmatter":{"title":"ORM과 JPA (2)"}}},{"node":{"id":"e46642ac-6d65-51b8-a535-21a9e3eabb56"},"next":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}},"previous":{"fields":{"slug":"/posts/orm과-jpa-1/"},"frontmatter":{"title":"ORM과 JPA (1)"}}},{"node":{"id":"46426481-29ee-5d00-aa6c-cf05d52490f6"},"next":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}},"previous":{"fields":{"slug":"/posts/apache-spark-2-rdd/"},"frontmatter":{"title":"Apache Spark (2) - RDD"}}},{"node":{"id":"6eed9dfa-e294-5b19-a225-cd43d6cb982a"},"next":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}},"previous":{"fields":{"slug":"/posts/apache-spark-1-개요/"},"frontmatter":{"title":"Apache Spark (1) - 개요"}}},{"node":{"id":"f016fc75-8476-5493-8ac1-e2862773f3e7"},"next":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}},"previous":{"fields":{"slug":"/posts/동시성-처리/"},"frontmatter":{"title":"동시성 처리"}}},{"node":{"id":"9f5a9a91-7af6-5ca3-b20f-d6e177e46c68"},"next":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}},"previous":{"fields":{"slug":"/posts/erd/"},"frontmatter":{"title":"ERD"}}},{"node":{"id":"f77c8cbf-3a58-53fc-bd32-592702676a11"},"next":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}},"previous":{"fields":{"slug":"/posts/git-사용법/"},"frontmatter":{"title":"Git 사용법"}}},{"node":{"id":"b4e07799-70a4-523d-90ec-741e18230194"},"next":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}},"previous":{"fields":{"slug":"/posts/database/"},"frontmatter":{"title":"DATABASE"}}},{"node":{"id":"571df319-d1dd-59b6-a588-7a5db12c6b3d"},"next":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}},"previous":{"fields":{"slug":"/posts/jpa-1-query/"},"frontmatter":{"title":"JPA (1) - Query"}}},{"node":{"id":"ef05bf06-2d53-5323-820b-98f46a906289"},"next":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}},"previous":{"fields":{"slug":"/posts/jpa-2-specification/"},"frontmatter":{"title":"JPA (2) - Specification"}}},{"node":{"id":"a78eb59a-78b3-5c86-bcc2-f09ea58fab23"},"next":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}},"previous":{"fields":{"slug":"/posts/j-query/"},"frontmatter":{"title":"jQuery"}}},{"node":{"id":"3c37f3d1-7097-5528-a31b-12bcdcd937ab"},"next":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}},"previous":{"fields":{"slug":"/posts/kubernetes/"},"frontmatter":{"title":"Kubernetes"}}},{"node":{"id":"fe690dd1-ec0c-544b-a44f-131d80987565"},"next":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}},"previous":{"fields":{"slug":"/posts/node-js/"},"frontmatter":{"title":"NodeJS"}}},{"node":{"id":"b8c8c26f-09bc-5759-8a7e-c81ffbc8f2c0"},"next":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}},"previous":{"fields":{"slug":"/posts/oop/"},"frontmatter":{"title":"OOP"}}},{"node":{"id":"6268f141-e6af-5f89-a55b-2174ef57651f"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/postgre-sql-2-psql/"},"frontmatter":{"title":"PostgreSQL (2) - PSQL"}}},{"node":{"id":"1a663d51-139e-500f-a209-04faaebd2e85"},"next":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}},"previous":{"fields":{"slug":"/posts/postgre-sql-1-개요/"},"frontmatter":{"title":"PostgreSQL (1) - 개요"}}},{"node":{"id":"b227a2c1-7853-5450-a1be-f3e1c83307b4"},"next":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"80979747-a7b7-5e5d-81bb-30729e2e16bd"},"next":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}},"previous":{"fields":{"slug":"/posts/react-hook/"},"frontmatter":{"title":"React Hook"}}},{"node":{"id":"a82c048c-1eea-54e3-912d-ae875640e04e"},"next":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}},"previous":{"fields":{"slug":"/posts/redux-react-redux/"},"frontmatter":{"title":"Redux & React-Redux"}}},{"node":{"id":"18c2a54b-1a71-511c-824c-f437be00f3ef"},"next":{"fields":{"slug":"/posts/tomcat-사용법/"},"frontmatter":{"title":"Tomcat 사용법"}},"previous":{"fields":{"slug":"/posts/react/"},"frontmatter":{"title":"React"}}},{"node":{"id":"d2056881-058f-5f23-88ec-cf613dff77f0"},"next":{"fields":{"slug":"/posts/web-rtc/"},"frontmatter":{"title":"WebRTC"}},"previous":{"fields":{"slug":"/posts/swagger/"},"frontmatter":{"title":"Swagger"}}},{"node":{"id":"d54a4c19-013d-538a-893d-ff8f62d34d7a"},"next":null,"previous":{"fields":{"slug":"/posts/tomcat-사용법/"},"frontmatter":{"title":"Tomcat 사용법"}}}]}},"pageContext":{"id":"54319bda-39af-5fa4-9eee-7f84ee580c1a"}},"staticQueryHashes":["2001315320"]}